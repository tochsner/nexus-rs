<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="3670"><g><title>dyld3::stat(char const*, stat*) (1 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0272%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>stat64 (1 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0272%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (1 samples, 0.03%)</title><rect x="0.0272%" y="405" width="0.0272%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2772%" y="415.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.03%)</title><rect x="0.0272%" y="389" width="0.0272%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2772%" y="399.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.03%)</title><rect x="0.0272%" y="373" width="0.0272%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2772%" y="383.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.03%)</title><rect x="0.0272%" y="357" width="0.0272%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2772%" y="367.50"></text></g><g><title>dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&amp;, bool, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0272%" y="341" width="0.0272%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2772%" y="351.50"></text></g><g><title>dyld3::MachOFile::forEachLoadCommand(Diagnostics&amp;, void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0272%" y="325" width="0.0272%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2772%" y="335.50"></text></g><g><title>invocation function for block in dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&amp;, bool, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0272%" y="309" width="0.0272%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2772%" y="319.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.03%)</title><rect x="0.0272%" y="293" width="0.0272%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2772%" y="303.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const::$_0::operator()() const (1 samples, 0.03%)</title><rect x="0.0272%" y="277" width="0.0272%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2772%" y="287.50"></text></g><g><title>libSystem_initializer (1 samples, 0.03%)</title><rect x="0.0272%" y="261" width="0.0272%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2772%" y="271.50"></text></g><g><title>libdispatch_init (1 samples, 0.03%)</title><rect x="0.0272%" y="245" width="0.0272%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2772%" y="255.50"></text></g><g><title>_os_object_init (1 samples, 0.03%)</title><rect x="0.0272%" y="229" width="0.0272%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.2772%" y="239.50"></text></g><g><title>_objc_init (1 samples, 0.03%)</title><rect x="0.0272%" y="213" width="0.0272%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.2772%" y="223.50"></text></g><g><title>dyld4::APIs::_dyld_objc_register_callbacks(_dyld_objc_callbacks const*) (1 samples, 0.03%)</title><rect x="0.0272%" y="197" width="0.0272%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.2772%" y="207.50"></text></g><g><title>dyld4::RuntimeState::setObjCNotifiers(void (*)(char const*, mach_header const*), void (*)(mach_header const*, void*, mach_header const*, void const*), void (*)(unsigned int, _dyld_objc_notify_mapped_info const*), void (*)(_dyld_objc_notify_mapped_info const*), void (*)(unsigned int, _dyld_objc_notify_mapped_info const*, void (unsigned int) block_pointer)) (1 samples, 0.03%)</title><rect x="0.0272%" y="181" width="0.0272%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.2772%" y="191.50"></text></g><g><title>dyld4::RuntimeLocks::withLoadersReadLock(void () block_pointer) (1 samples, 0.03%)</title><rect x="0.0272%" y="165" width="0.0272%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.2772%" y="175.50"></text></g><g><title>invocation function for block in dyld4::RuntimeState::setObjCNotifiers(void (*)(char const*, mach_header const*), void (*)(mach_header const*, void*, mach_header const*, void const*), void (*)(unsigned int, _dyld_objc_notify_mapped_info const*), void (*)(_dyld_objc_notify_mapped_info const*), void (*)(unsigned int, _dyld_objc_notify_mapped_info const*, void (unsigned int) block_pointer))::$_8::operator()() const (1 samples, 0.03%)</title><rect x="0.0272%" y="149" width="0.0272%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.2772%" y="159.50"></text></g><g><title>map_images (1 samples, 0.03%)</title><rect x="0.0272%" y="133" width="0.0272%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.2772%" y="143.50"></text></g><g><title>map_images_nolock (1 samples, 0.03%)</title><rect x="0.0272%" y="117" width="0.0272%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.2772%" y="127.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool) const (1 samples, 0.03%)</title><rect x="0.0545%" y="405" width="0.0272%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="0.3045%" y="415.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0545%" y="389" width="0.0272%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="0.3045%" y="399.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0545%" y="373" width="0.0272%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="0.3045%" y="383.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0545%" y="357" width="0.0272%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="0.3045%" y="367.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0545%" y="341" width="0.0272%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="0.3045%" y="351.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0545%" y="325" width="0.0272%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="0.3045%" y="335.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0545%" y="309" width="0.0272%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="0.3045%" y="319.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0545%" y="293" width="0.0272%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="0.3045%" y="303.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0545%" y="277" width="0.0272%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="0.3045%" y="287.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.03%)</title><rect x="0.0545%" y="261" width="0.0272%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="0.3045%" y="271.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.03%)</title><rect x="0.0545%" y="245" width="0.0272%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="0.3045%" y="255.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.03%)</title><rect x="0.0545%" y="229" width="0.0272%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="1"/><text x="0.3045%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::DependentDylibAttributes*) const (1 samples, 0.03%)</title><rect x="0.0545%" y="213" width="0.0272%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="0.3045%" y="223.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, dyld3::MachOAnalyzer const*) (4 samples, 0.11%)</title><rect x="0.0000%" y="421" width="0.1090%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="431.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.0817%" y="405" width="0.0272%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="0.3317%" y="415.50"></text></g><g><title>mach_o::Header::forEachDependentDylib(void (char const*, mach_o::DependentDylibAttributes, mach_o::Version32, mach_o::Version32, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0817%" y="389" width="0.0272%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="0.3317%" y="399.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0817%" y="373" width="0.0272%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1"/><text x="0.3317%" y="383.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachDependentDylib(void (char const*, mach_o::DependentDylibAttributes, mach_o::Version32, mach_o::Version32, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0817%" y="357" width="0.0272%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1"/><text x="0.3317%" y="367.50"></text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.0817%" y="341" width="0.0272%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1"/><text x="0.3317%" y="351.50"></text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.0817%" y="325" width="0.0272%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="0.3317%" y="335.50"></text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (1 samples, 0.03%)</title><rect x="0.0817%" y="309" width="0.0272%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="0.3317%" y="319.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0817%" y="293" width="0.0272%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="0.3317%" y="303.50"></text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (1 samples, 0.03%)</title><rect x="0.0817%" y="277" width="0.0272%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="0.3317%" y="287.50"></text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.0817%" y="261" width="0.0272%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1"/><text x="0.3317%" y="271.50"></text></g><g><title>dyld4::Loader::makeDyldCacheLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, unsigned int, mach_o::Layout const*) (1 samples, 0.03%)</title><rect x="0.0817%" y="245" width="0.0272%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="0.3317%" y="255.50"></text></g><g><title>dyld4::RuntimeState::findPrebuiltLoader(char const*) const (1 samples, 0.03%)</title><rect x="0.0817%" y="229" width="0.0272%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1"/><text x="0.3317%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::isValid(dyld4::RuntimeState const&amp;) const (1 samples, 0.03%)</title><rect x="0.0817%" y="213" width="0.0272%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="1"/><text x="0.3317%" y="223.50"></text></g><g><title>_szone_free (3 samples, 0.08%)</title><rect x="0.1090%" y="341" width="0.0817%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="3"/><text x="0.3590%" y="351.50"></text></g><g><title>free_large (1 samples, 0.03%)</title><rect x="0.1635%" y="325" width="0.0272%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="1"/><text x="0.4135%" y="335.50"></text></g><g><title>madvise (1 samples, 0.03%)</title><rect x="0.1635%" y="309" width="0.0272%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="0.4135%" y="319.50"></text></g><g><title>free_small (7 samples, 0.19%)</title><rect x="0.1907%" y="341" width="0.1907%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="7"/><text x="0.4407%" y="351.50"></text></g><g><title>small_free_scan_madvise_free (7 samples, 0.19%)</title><rect x="0.1907%" y="325" width="0.1907%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="7"/><text x="0.4407%" y="335.50"></text></g><g><title>mvm_madvise_free_plat (7 samples, 0.19%)</title><rect x="0.1907%" y="309" width="0.1907%" height="15" fill="rgb(231,138,38)" fg:x="7" fg:w="7"/><text x="0.4407%" y="319.50"></text></g><g><title>madvise (7 samples, 0.19%)</title><rect x="0.1907%" y="293" width="0.1907%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="7"/><text x="0.4407%" y="303.50"></text></g><g><title>mvm_deallocate_plat (6 samples, 0.16%)</title><rect x="0.3815%" y="341" width="0.1635%" height="15" fill="rgb(251,118,11)" fg:x="14" fg:w="6"/><text x="0.6315%" y="351.50"></text></g><g><title>mach_vm_deallocate (6 samples, 0.16%)</title><rect x="0.3815%" y="325" width="0.1635%" height="15" fill="rgb(217,147,25)" fg:x="14" fg:w="6"/><text x="0.6315%" y="335.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (6 samples, 0.16%)</title><rect x="0.3815%" y="309" width="0.1635%" height="15" fill="rgb(247,81,37)" fg:x="14" fg:w="6"/><text x="0.6315%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="0.5722%" y="309" width="0.0272%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="1"/><text x="0.8222%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1 samples, 0.03%)</title><rect x="0.5995%" y="293" width="0.0272%" height="15" fill="rgb(227,1,9)" fg:x="22" fg:w="1"/><text x="0.8495%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (2 samples, 0.05%)</title><rect x="0.5995%" y="309" width="0.0545%" height="15" fill="rgb(248,47,43)" fg:x="22" fg:w="2"/><text x="0.8495%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="0.6267%" y="293" width="0.0272%" height="15" fill="rgb(221,10,30)" fg:x="23" fg:w="1"/><text x="0.8767%" y="303.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="0.6540%" y="309" width="0.0272%" height="15" fill="rgb(210,229,1)" fg:x="24" fg:w="1"/><text x="0.9040%" y="319.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="0.6812%" y="309" width="0.0272%" height="15" fill="rgb(222,148,37)" fg:x="25" fg:w="1"/><text x="0.9312%" y="319.50"></text></g><g><title>regex::regex::string::Regex::find_at (8 samples, 0.22%)</title><rect x="0.7084%" y="309" width="0.2180%" height="15" fill="rgb(234,67,33)" fg:x="26" fg:w="8"/><text x="0.9584%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.16%)</title><rect x="0.7629%" y="293" width="0.1635%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="6"/><text x="1.0129%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.16%)</title><rect x="0.7629%" y="277" width="0.1635%" height="15" fill="rgb(247,138,52)" fg:x="28" fg:w="6"/><text x="1.0129%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.11%)</title><rect x="0.8174%" y="261" width="0.1090%" height="15" fill="rgb(213,79,30)" fg:x="30" fg:w="4"/><text x="1.0674%" y="271.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (14 samples, 0.38%)</title><rect x="0.5722%" y="325" width="0.3815%" height="15" fill="rgb(246,177,23)" fg:x="21" fg:w="14"/><text x="0.8222%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="0.9264%" y="309" width="0.0272%" height="15" fill="rgb(230,62,27)" fg:x="34" fg:w="1"/><text x="1.1764%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="0.9809%" y="293" width="0.0272%" height="15" fill="rgb(216,154,8)" fg:x="36" fg:w="1"/><text x="1.2309%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.16%)</title><rect x="1.0354%" y="261" width="0.1635%" height="15" fill="rgb(244,35,45)" fg:x="38" fg:w="6"/><text x="1.2854%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.14%)</title><rect x="1.0627%" y="245" width="0.1362%" height="15" fill="rgb(251,115,12)" fg:x="39" fg:w="5"/><text x="1.3127%" y="255.50"></text></g><g><title>nexus::parser::Parser::parse_keyword (10 samples, 0.27%)</title><rect x="0.9537%" y="325" width="0.2725%" height="15" fill="rgb(240,54,50)" fg:x="35" fg:w="10"/><text x="1.2037%" y="335.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (10 samples, 0.27%)</title><rect x="0.9537%" y="309" width="0.2725%" height="15" fill="rgb(233,84,52)" fg:x="35" fg:w="10"/><text x="1.2037%" y="319.50"></text></g><g><title>regex::regex::string::Regex::find_at (8 samples, 0.22%)</title><rect x="1.0082%" y="293" width="0.2180%" height="15" fill="rgb(207,117,47)" fg:x="37" fg:w="8"/><text x="1.2582%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.19%)</title><rect x="1.0354%" y="277" width="0.1907%" height="15" fill="rgb(249,43,39)" fg:x="38" fg:w="7"/><text x="1.2854%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="1.1989%" y="261" width="0.0272%" height="15" fill="rgb(209,38,44)" fg:x="44" fg:w="1"/><text x="1.4489%" y="271.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.03%)</title><rect x="1.2534%" y="293" width="0.0272%" height="15" fill="rgb(236,212,23)" fg:x="46" fg:w="1"/><text x="1.5034%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.03%)</title><rect x="1.2534%" y="277" width="0.0272%" height="15" fill="rgb(242,79,21)" fg:x="46" fg:w="1"/><text x="1.5034%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.11%)</title><rect x="1.3624%" y="261" width="0.1090%" height="15" fill="rgb(211,96,35)" fg:x="50" fg:w="4"/><text x="1.6124%" y="271.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.11%)</title><rect x="1.3624%" y="245" width="0.1090%" height="15" fill="rgb(253,215,40)" fg:x="50" fg:w="4"/><text x="1.6124%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.08%)</title><rect x="1.3896%" y="229" width="0.0817%" height="15" fill="rgb(211,81,21)" fg:x="51" fg:w="3"/><text x="1.6396%" y="239.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (10 samples, 0.27%)</title><rect x="1.2262%" y="309" width="0.2725%" height="15" fill="rgb(208,190,38)" fg:x="45" fg:w="10"/><text x="1.4762%" y="319.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (8 samples, 0.22%)</title><rect x="1.2807%" y="293" width="0.2180%" height="15" fill="rgb(235,213,38)" fg:x="47" fg:w="8"/><text x="1.5307%" y="303.50"></text></g><g><title>regex::regex::string::Regex::find_at (6 samples, 0.16%)</title><rect x="1.3351%" y="277" width="0.1635%" height="15" fill="rgb(237,122,38)" fg:x="49" fg:w="6"/><text x="1.5851%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.03%)</title><rect x="1.4714%" y="261" width="0.0272%" height="15" fill="rgb(244,218,35)" fg:x="54" fg:w="1"/><text x="1.7214%" y="271.50"></text></g><g><title>indextree::id::NodeId::checked_append (2 samples, 0.05%)</title><rect x="1.4986%" y="293" width="0.0545%" height="15" fill="rgb(240,68,47)" fg:x="55" fg:w="2"/><text x="1.7486%" y="303.50"></text></g><g><title>indextree::relations::insert_with_neighbors (1 samples, 0.03%)</title><rect x="1.5259%" y="277" width="0.0272%" height="15" fill="rgb(210,16,53)" fg:x="56" fg:w="1"/><text x="1.7759%" y="287.50"></text></g><g><title>indextree::siblings_range::DetachedSiblingsRange::transplant (1 samples, 0.03%)</title><rect x="1.5259%" y="261" width="0.0272%" height="15" fill="rgb(235,124,12)" fg:x="56" fg:w="1"/><text x="1.7759%" y="271.50"></text></g><g><title>indextree::relations::connect_neighbors (1 samples, 0.03%)</title><rect x="1.5259%" y="245" width="0.0272%" height="15" fill="rgb(224,169,11)" fg:x="56" fg:w="1"/><text x="1.7759%" y="255.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (1 samples, 0.03%)</title><rect x="1.5531%" y="293" width="0.0272%" height="15" fill="rgb(250,166,2)" fg:x="57" fg:w="1"/><text x="1.8031%" y="303.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.03%)</title><rect x="1.6076%" y="277" width="0.0272%" height="15" fill="rgb(242,216,29)" fg:x="59" fg:w="1"/><text x="1.8576%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.03%)</title><rect x="1.6076%" y="261" width="0.0272%" height="15" fill="rgb(230,116,27)" fg:x="59" fg:w="1"/><text x="1.8576%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (1 samples, 0.03%)</title><rect x="1.6349%" y="261" width="0.0272%" height="15" fill="rgb(228,99,48)" fg:x="60" fg:w="1"/><text x="1.8849%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="1.6349%" y="245" width="0.0272%" height="15" fill="rgb(253,11,6)" fg:x="60" fg:w="1"/><text x="1.8849%" y="255.50"></text></g><g><title>_nanov2_free (2 samples, 0.05%)</title><rect x="1.6621%" y="261" width="0.0545%" height="15" fill="rgb(247,143,39)" fg:x="61" fg:w="2"/><text x="1.9121%" y="271.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="1.6894%" y="245" width="0.0272%" height="15" fill="rgb(236,97,10)" fg:x="62" fg:w="1"/><text x="1.9394%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (15 samples, 0.41%)</title><rect x="1.7439%" y="229" width="0.4087%" height="15" fill="rgb(233,208,19)" fg:x="64" fg:w="15"/><text x="1.9939%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (14 samples, 0.38%)</title><rect x="1.7711%" y="213" width="0.3815%" height="15" fill="rgb(216,164,2)" fg:x="65" fg:w="14"/><text x="2.0211%" y="223.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (20 samples, 0.54%)</title><rect x="1.6349%" y="277" width="0.5450%" height="15" fill="rgb(220,129,5)" fg:x="60" fg:w="20"/><text x="1.8849%" y="287.50"></text></g><g><title>regex::regex::string::Regex::find_at (17 samples, 0.46%)</title><rect x="1.7166%" y="261" width="0.4632%" height="15" fill="rgb(242,17,10)" fg:x="63" fg:w="17"/><text x="1.9666%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (16 samples, 0.44%)</title><rect x="1.7439%" y="245" width="0.4360%" height="15" fill="rgb(242,107,0)" fg:x="64" fg:w="16"/><text x="1.9939%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="2.1526%" y="229" width="0.0272%" height="15" fill="rgb(251,28,31)" fg:x="79" fg:w="1"/><text x="2.4026%" y="239.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (23 samples, 0.63%)</title><rect x="1.5804%" y="293" width="0.6267%" height="15" fill="rgb(233,223,10)" fg:x="58" fg:w="23"/><text x="1.8304%" y="303.50"></text></g><g><title>regex::regex::string::Regex::find_at (1 samples, 0.03%)</title><rect x="2.1798%" y="277" width="0.0272%" height="15" fill="rgb(215,21,27)" fg:x="80" fg:w="1"/><text x="2.4298%" y="287.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::new_node (1 samples, 0.03%)</title><rect x="2.2071%" y="277" width="0.0272%" height="15" fill="rgb(232,23,21)" fg:x="81" fg:w="1"/><text x="2.4571%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="2.2071%" y="261" width="0.0272%" height="15" fill="rgb(244,5,23)" fg:x="81" fg:w="1"/><text x="2.4571%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="2.2071%" y="245" width="0.0272%" height="15" fill="rgb(226,81,46)" fg:x="81" fg:w="1"/><text x="2.4571%" y="255.50"></text></g><g><title>_realloc (1 samples, 0.03%)</title><rect x="2.2071%" y="229" width="0.0272%" height="15" fill="rgb(247,70,30)" fg:x="81" fg:w="1"/><text x="2.4571%" y="239.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="2.2071%" y="213" width="0.0272%" height="15" fill="rgb(212,68,19)" fg:x="81" fg:w="1"/><text x="2.4571%" y="223.50"></text></g><g><title>szone_realloc (1 samples, 0.03%)</title><rect x="2.2071%" y="197" width="0.0272%" height="15" fill="rgb(240,187,13)" fg:x="81" fg:w="1"/><text x="2.4571%" y="207.50"></text></g><g><title>_platform_memmove (1 samples, 0.03%)</title><rect x="2.2071%" y="181" width="0.0272%" height="15" fill="rgb(223,113,26)" fg:x="81" fg:w="1"/><text x="2.4571%" y="191.50"></text></g><g><title>indextree::id::NodeId::checked_append (6 samples, 0.16%)</title><rect x="2.2343%" y="277" width="0.1635%" height="15" fill="rgb(206,192,2)" fg:x="82" fg:w="6"/><text x="2.4843%" y="287.50"></text></g><g><title>indextree::relations::insert_with_neighbors (5 samples, 0.14%)</title><rect x="2.2616%" y="261" width="0.1362%" height="15" fill="rgb(241,108,4)" fg:x="83" fg:w="5"/><text x="2.5116%" y="271.50"></text></g><g><title>indextree::siblings_range::DetachedSiblingsRange::transplant (3 samples, 0.08%)</title><rect x="2.3161%" y="245" width="0.0817%" height="15" fill="rgb(247,173,49)" fg:x="85" fg:w="3"/><text x="2.5661%" y="255.50"></text></g><g><title>indextree::relations::connect_neighbors (2 samples, 0.05%)</title><rect x="2.3433%" y="229" width="0.0545%" height="15" fill="rgb(224,114,35)" fg:x="86" fg:w="2"/><text x="2.5933%" y="239.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.03%)</title><rect x="2.3978%" y="261" width="0.0272%" height="15" fill="rgb(245,159,27)" fg:x="88" fg:w="1"/><text x="2.6478%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.03%)</title><rect x="2.3978%" y="245" width="0.0272%" height="15" fill="rgb(245,172,44)" fg:x="88" fg:w="1"/><text x="2.6478%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1 samples, 0.03%)</title><rect x="2.4796%" y="229" width="0.0272%" height="15" fill="rgb(236,23,11)" fg:x="91" fg:w="1"/><text x="2.7296%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (2 samples, 0.05%)</title><rect x="2.4796%" y="245" width="0.0545%" height="15" fill="rgb(205,117,38)" fg:x="91" fg:w="2"/><text x="2.7296%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="2.5068%" y="229" width="0.0272%" height="15" fill="rgb(237,72,25)" fg:x="92" fg:w="1"/><text x="2.7568%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1 samples, 0.03%)</title><rect x="2.5068%" y="213" width="0.0272%" height="15" fill="rgb(244,70,9)" fg:x="92" fg:w="1"/><text x="2.7568%" y="223.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (28 samples, 0.76%)</title><rect x="2.6703%" y="213" width="0.7629%" height="15" fill="rgb(217,125,39)" fg:x="98" fg:w="28"/><text x="2.9203%" y="223.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (24 samples, 0.65%)</title><rect x="2.7793%" y="197" width="0.6540%" height="15" fill="rgb(235,36,10)" fg:x="102" fg:w="24"/><text x="3.0293%" y="207.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (38 samples, 1.04%)</title><rect x="2.4251%" y="261" width="1.0354%" height="15" fill="rgb(251,123,47)" fg:x="89" fg:w="38"/><text x="2.6751%" y="271.50"></text></g><g><title>regex::regex::string::Regex::find_at (34 samples, 0.93%)</title><rect x="2.5341%" y="245" width="0.9264%" height="15" fill="rgb(221,13,13)" fg:x="93" fg:w="34"/><text x="2.7841%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (29 samples, 0.79%)</title><rect x="2.6703%" y="229" width="0.7902%" height="15" fill="rgb(238,131,9)" fg:x="98" fg:w="29"/><text x="2.9203%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="3.4332%" y="213" width="0.0272%" height="15" fill="rgb(211,50,8)" fg:x="126" fg:w="1"/><text x="3.6832%" y="223.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (40 samples, 1.09%)</title><rect x="2.3978%" y="277" width="1.0899%" height="15" fill="rgb(245,182,24)" fg:x="88" fg:w="40"/><text x="2.6478%" y="287.50"></text></g><g><title>regex::regex::string::Regex::find_at (1 samples, 0.03%)</title><rect x="3.4605%" y="261" width="0.0272%" height="15" fill="rgb(242,14,37)" fg:x="127" fg:w="1"/><text x="3.7105%" y="271.50"></text></g><g><title>_realloc (6 samples, 0.16%)</title><rect x="3.5695%" y="213" width="0.1635%" height="15" fill="rgb(246,228,12)" fg:x="131" fg:w="6"/><text x="3.8195%" y="223.50"></text></g><g><title>_malloc_zone_realloc (6 samples, 0.16%)</title><rect x="3.5695%" y="197" width="0.1635%" height="15" fill="rgb(213,55,15)" fg:x="131" fg:w="6"/><text x="3.8195%" y="207.50"></text></g><g><title>szone_realloc (6 samples, 0.16%)</title><rect x="3.5695%" y="181" width="0.1635%" height="15" fill="rgb(209,9,3)" fg:x="131" fg:w="6"/><text x="3.8195%" y="191.50"></text></g><g><title>_platform_memmove (6 samples, 0.16%)</title><rect x="3.5695%" y="165" width="0.1635%" height="15" fill="rgb(230,59,30)" fg:x="131" fg:w="6"/><text x="3.8195%" y="175.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::new_node (9 samples, 0.25%)</title><rect x="3.5150%" y="261" width="0.2452%" height="15" fill="rgb(209,121,21)" fg:x="129" fg:w="9"/><text x="3.7650%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (7 samples, 0.19%)</title><rect x="3.5695%" y="245" width="0.1907%" height="15" fill="rgb(220,109,13)" fg:x="131" fg:w="7"/><text x="3.8195%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.19%)</title><rect x="3.5695%" y="229" width="0.1907%" height="15" fill="rgb(232,18,1)" fg:x="131" fg:w="7"/><text x="3.8195%" y="239.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="3.7330%" y="213" width="0.0272%" height="15" fill="rgb(215,41,42)" fg:x="137" fg:w="1"/><text x="3.9830%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="3.7330%" y="197" width="0.0272%" height="15" fill="rgb(224,123,36)" fg:x="137" fg:w="1"/><text x="3.9830%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="3.7330%" y="181" width="0.0272%" height="15" fill="rgb(240,125,3)" fg:x="137" fg:w="1"/><text x="3.9830%" y="191.50"></text></g><g><title>set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="3.7330%" y="165" width="0.0272%" height="15" fill="rgb(205,98,50)" fg:x="137" fg:w="1"/><text x="3.9830%" y="175.50"></text></g><g><title>indextree::id::NodeId::checked_append (9 samples, 0.25%)</title><rect x="3.7602%" y="261" width="0.2452%" height="15" fill="rgb(205,185,37)" fg:x="138" fg:w="9"/><text x="4.0102%" y="271.50"></text></g><g><title>indextree::relations::insert_with_neighbors (5 samples, 0.14%)</title><rect x="3.8692%" y="245" width="0.1362%" height="15" fill="rgb(238,207,15)" fg:x="142" fg:w="5"/><text x="4.1192%" y="255.50"></text></g><g><title>indextree::siblings_range::DetachedSiblingsRange::transplant (4 samples, 0.11%)</title><rect x="3.8965%" y="229" width="0.1090%" height="15" fill="rgb(213,199,42)" fg:x="143" fg:w="4"/><text x="4.1465%" y="239.50"></text></g><g><title>indextree::relations::connect_neighbors (2 samples, 0.05%)</title><rect x="3.9510%" y="213" width="0.0545%" height="15" fill="rgb(235,201,11)" fg:x="145" fg:w="2"/><text x="4.2010%" y="223.50"></text></g><g><title>indextree::relations::insert_with_neighbors (1 samples, 0.03%)</title><rect x="4.0054%" y="261" width="0.0272%" height="15" fill="rgb(207,46,11)" fg:x="147" fg:w="1"/><text x="4.2554%" y="271.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (2 samples, 0.05%)</title><rect x="4.0327%" y="261" width="0.0545%" height="15" fill="rgb(241,35,35)" fg:x="148" fg:w="2"/><text x="4.2827%" y="271.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="4.0872%" y="245" width="0.0272%" height="15" fill="rgb(243,32,47)" fg:x="150" fg:w="1"/><text x="4.3372%" y="255.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (6 samples, 0.16%)</title><rect x="4.1144%" y="245" width="0.1635%" height="15" fill="rgb(247,202,23)" fg:x="151" fg:w="6"/><text x="4.3644%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (6 samples, 0.16%)</title><rect x="4.1144%" y="229" width="0.1635%" height="15" fill="rgb(219,102,11)" fg:x="151" fg:w="6"/><text x="4.3644%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (2 samples, 0.05%)</title><rect x="4.4142%" y="229" width="0.0545%" height="15" fill="rgb(243,110,44)" fg:x="162" fg:w="2"/><text x="4.6642%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (2 samples, 0.05%)</title><rect x="4.4142%" y="213" width="0.0545%" height="15" fill="rgb(222,74,54)" fg:x="162" fg:w="2"/><text x="4.6642%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1 samples, 0.03%)</title><rect x="4.4414%" y="197" width="0.0272%" height="15" fill="rgb(216,99,12)" fg:x="163" fg:w="1"/><text x="4.6914%" y="207.50"></text></g><g><title>_nanov2_free (7 samples, 0.19%)</title><rect x="4.4687%" y="229" width="0.1907%" height="15" fill="rgb(226,22,26)" fg:x="164" fg:w="7"/><text x="4.7187%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (62 samples, 1.69%)</title><rect x="4.8501%" y="213" width="1.6894%" height="15" fill="rgb(217,163,10)" fg:x="178" fg:w="62"/><text x="5.1001%" y="223.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (61 samples, 1.66%)</title><rect x="4.8774%" y="197" width="1.6621%" height="15" fill="rgb(213,25,53)" fg:x="179" fg:w="61"/><text x="5.1274%" y="207.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (57 samples, 1.55%)</title><rect x="4.9864%" y="181" width="1.5531%" height="15" fill="rgb(252,105,26)" fg:x="183" fg:w="57"/><text x="5.2364%" y="191.50"></text></g><g><title>regex::regex::string::Regex::find_at (70 samples, 1.91%)</title><rect x="4.6594%" y="229" width="1.9074%" height="15" fill="rgb(220,39,43)" fg:x="171" fg:w="70"/><text x="4.9094%" y="239.50">r..</text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.03%)</title><rect x="6.5395%" y="213" width="0.0272%" height="15" fill="rgb(229,68,48)" fg:x="240" fg:w="1"/><text x="6.7895%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (1 samples, 0.03%)</title><rect x="6.5668%" y="229" width="0.0272%" height="15" fill="rgb(252,8,32)" fg:x="241" fg:w="1"/><text x="6.8168%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="6.5940%" y="229" width="0.0272%" height="15" fill="rgb(223,20,43)" fg:x="242" fg:w="1"/><text x="6.8440%" y="239.50"></text></g><g><title>regex_automata::util::captures::Captures::all (2 samples, 0.05%)</title><rect x="6.6213%" y="229" width="0.0545%" height="15" fill="rgb(229,81,49)" fg:x="243" fg:w="2"/><text x="6.8713%" y="239.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="6.6485%" y="213" width="0.0272%" height="15" fill="rgb(236,28,36)" fg:x="244" fg:w="1"/><text x="6.8985%" y="223.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (89 samples, 2.43%)</title><rect x="4.2779%" y="245" width="2.4251%" height="15" fill="rgb(249,185,26)" fg:x="157" fg:w="89"/><text x="4.5279%" y="255.50">ne..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="6.6757%" y="229" width="0.0272%" height="15" fill="rgb(249,174,33)" fg:x="245" fg:w="1"/><text x="6.9257%" y="239.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (97 samples, 2.64%)</title><rect x="4.0872%" y="261" width="2.6431%" height="15" fill="rgb(233,201,37)" fg:x="150" fg:w="97"/><text x="4.3372%" y="271.50">ne..</text></g><g><title>regex::regex::string::Regex::find_at (1 samples, 0.03%)</title><rect x="6.7030%" y="245" width="0.0272%" height="15" fill="rgb(221,78,26)" fg:x="246" fg:w="1"/><text x="6.9530%" y="255.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="6.7302%" y="245" width="0.0272%" height="15" fill="rgb(250,127,30)" fg:x="247" fg:w="1"/><text x="6.9802%" y="255.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="6.7575%" y="245" width="0.0272%" height="15" fill="rgb(230,49,44)" fg:x="248" fg:w="1"/><text x="7.0075%" y="255.50"></text></g><g><title>_platform_memmove (5 samples, 0.14%)</title><rect x="6.9482%" y="165" width="0.1362%" height="15" fill="rgb(229,67,23)" fg:x="255" fg:w="5"/><text x="7.1982%" y="175.50"></text></g><g><title>_platform_memmove (56 samples, 1.53%)</title><rect x="7.1117%" y="149" width="1.5259%" height="15" fill="rgb(249,83,47)" fg:x="261" fg:w="56"/><text x="7.3617%" y="159.50"></text></g><g><title>free_small (1 samples, 0.03%)</title><rect x="8.6376%" y="149" width="0.0272%" height="15" fill="rgb(215,43,3)" fg:x="317" fg:w="1"/><text x="8.8876%" y="159.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="8.6376%" y="133" width="0.0272%" height="15" fill="rgb(238,154,13)" fg:x="317" fg:w="1"/><text x="8.8876%" y="143.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::new_node (71 samples, 1.93%)</title><rect x="6.7847%" y="245" width="1.9346%" height="15" fill="rgb(219,56,2)" fg:x="249" fg:w="71"/><text x="7.0347%" y="255.50">i..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (65 samples, 1.77%)</title><rect x="6.9482%" y="229" width="1.7711%" height="15" fill="rgb(233,0,4)" fg:x="255" fg:w="65"/><text x="7.1982%" y="239.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (65 samples, 1.77%)</title><rect x="6.9482%" y="213" width="1.7711%" height="15" fill="rgb(235,30,7)" fg:x="255" fg:w="65"/><text x="7.1982%" y="223.50">a..</text></g><g><title>_realloc (65 samples, 1.77%)</title><rect x="6.9482%" y="197" width="1.7711%" height="15" fill="rgb(250,79,13)" fg:x="255" fg:w="65"/><text x="7.1982%" y="207.50">_..</text></g><g><title>_malloc_zone_realloc (65 samples, 1.77%)</title><rect x="6.9482%" y="181" width="1.7711%" height="15" fill="rgb(211,146,34)" fg:x="255" fg:w="65"/><text x="7.1982%" y="191.50">_..</text></g><g><title>szone_realloc (60 samples, 1.63%)</title><rect x="7.0845%" y="165" width="1.6349%" height="15" fill="rgb(228,22,38)" fg:x="260" fg:w="60"/><text x="7.3345%" y="175.50"></text></g><g><title>szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="8.6649%" y="149" width="0.0545%" height="15" fill="rgb(235,168,5)" fg:x="318" fg:w="2"/><text x="8.9149%" y="159.50"></text></g><g><title>small_malloc_should_clear (2 samples, 0.05%)</title><rect x="8.6649%" y="133" width="0.0545%" height="15" fill="rgb(221,155,16)" fg:x="318" fg:w="2"/><text x="8.9149%" y="143.50"></text></g><g><title>small_malloc_from_free_list (1 samples, 0.03%)</title><rect x="8.6921%" y="117" width="0.0272%" height="15" fill="rgb(215,215,53)" fg:x="319" fg:w="1"/><text x="8.9421%" y="127.50"></text></g><g><title>indextree::relations::connect_neighbors (1 samples, 0.03%)</title><rect x="8.7466%" y="213" width="0.0272%" height="15" fill="rgb(223,4,10)" fg:x="321" fg:w="1"/><text x="8.9966%" y="223.50"></text></g><g><title>indextree::id::NodeId::checked_append (6 samples, 0.16%)</title><rect x="8.7193%" y="245" width="0.1635%" height="15" fill="rgb(234,103,6)" fg:x="320" fg:w="6"/><text x="8.9693%" y="255.50"></text></g><g><title>indextree::relations::insert_with_neighbors (5 samples, 0.14%)</title><rect x="8.7466%" y="229" width="0.1362%" height="15" fill="rgb(227,97,0)" fg:x="321" fg:w="5"/><text x="8.9966%" y="239.50"></text></g><g><title>indextree::siblings_range::DetachedSiblingsRange::transplant (4 samples, 0.11%)</title><rect x="8.7738%" y="213" width="0.1090%" height="15" fill="rgb(234,150,53)" fg:x="322" fg:w="4"/><text x="9.0238%" y="223.50"></text></g><g><title>indextree::relations::connect_neighbors (3 samples, 0.08%)</title><rect x="8.8011%" y="197" width="0.0817%" height="15" fill="rgb(228,201,54)" fg:x="323" fg:w="3"/><text x="9.0511%" y="207.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (2 samples, 0.05%)</title><rect x="8.8828%" y="245" width="0.0545%" height="15" fill="rgb(222,22,37)" fg:x="326" fg:w="2"/><text x="9.1328%" y="255.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (7 samples, 0.19%)</title><rect x="8.9918%" y="229" width="0.1907%" height="15" fill="rgb(237,53,32)" fg:x="330" fg:w="7"/><text x="9.2418%" y="239.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (6 samples, 0.16%)</title><rect x="9.0191%" y="213" width="0.1635%" height="15" fill="rgb(233,25,53)" fg:x="331" fg:w="6"/><text x="9.2691%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (1 samples, 0.03%)</title><rect x="9.2916%" y="181" width="0.0272%" height="15" fill="rgb(210,40,34)" fg:x="341" fg:w="1"/><text x="9.5416%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (8 samples, 0.22%)</title><rect x="9.2371%" y="213" width="0.2180%" height="15" fill="rgb(241,220,44)" fg:x="339" fg:w="8"/><text x="9.4871%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (8 samples, 0.22%)</title><rect x="9.2371%" y="197" width="0.2180%" height="15" fill="rgb(235,28,35)" fg:x="339" fg:w="8"/><text x="9.4871%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (5 samples, 0.14%)</title><rect x="9.3188%" y="181" width="0.1362%" height="15" fill="rgb(210,56,17)" fg:x="342" fg:w="5"/><text x="9.5688%" y="191.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="9.4550%" y="213" width="0.0272%" height="15" fill="rgb(224,130,29)" fg:x="347" fg:w="1"/><text x="9.7050%" y="223.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="9.4823%" y="213" width="0.0272%" height="15" fill="rgb(235,212,8)" fg:x="348" fg:w="1"/><text x="9.7323%" y="223.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (80 samples, 2.18%)</title><rect x="10.0000%" y="181" width="2.1798%" height="15" fill="rgb(223,33,50)" fg:x="367" fg:w="80"/><text x="10.2500%" y="191.50">r..</text></g><g><title>regex_automata::hybrid::search::find_fwd (71 samples, 1.93%)</title><rect x="10.2452%" y="165" width="1.9346%" height="15" fill="rgb(219,149,13)" fg:x="376" fg:w="71"/><text x="10.4952%" y="175.50">r..</text></g><g><title>regex::regex::string::Regex::find_at (99 samples, 2.70%)</title><rect x="9.5095%" y="213" width="2.6975%" height="15" fill="rgb(250,156,29)" fg:x="349" fg:w="99"/><text x="9.7595%" y="223.50">re..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (84 samples, 2.29%)</title><rect x="9.9183%" y="197" width="2.2888%" height="15" fill="rgb(216,193,19)" fg:x="364" fg:w="84"/><text x="10.1683%" y="207.50">&lt;..</text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="12.1798%" y="181" width="0.0272%" height="15" fill="rgb(216,135,14)" fg:x="447" fg:w="1"/><text x="12.4298%" y="191.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="12.2343%" y="197" width="0.0272%" height="15" fill="rgb(241,47,5)" fg:x="449" fg:w="1"/><text x="12.4843%" y="207.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="12.2616%" y="197" width="0.0272%" height="15" fill="rgb(233,42,35)" fg:x="450" fg:w="1"/><text x="12.5116%" y="207.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (115 samples, 3.13%)</title><rect x="9.1826%" y="229" width="3.1335%" height="15" fill="rgb(231,13,6)" fg:x="337" fg:w="115"/><text x="9.4326%" y="239.50">nex..</text></g><g><title>regex_automata::util::captures::Captures::all (4 samples, 0.11%)</title><rect x="12.2071%" y="213" width="0.1090%" height="15" fill="rgb(207,181,40)" fg:x="448" fg:w="4"/><text x="12.4571%" y="223.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="12.2888%" y="197" width="0.0272%" height="15" fill="rgb(254,173,49)" fg:x="451" fg:w="1"/><text x="12.5388%" y="207.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (126 samples, 3.43%)</title><rect x="8.9373%" y="245" width="3.4332%" height="15" fill="rgb(221,1,38)" fg:x="328" fg:w="126"/><text x="9.1873%" y="255.50">nex..</text></g><g><title>regex_automata::util::captures::Captures::all (2 samples, 0.05%)</title><rect x="12.3161%" y="229" width="0.0545%" height="15" fill="rgb(206,124,46)" fg:x="452" fg:w="2"/><text x="12.5661%" y="239.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="12.5068%" y="229" width="0.0272%" height="15" fill="rgb(249,21,11)" fg:x="459" fg:w="1"/><text x="12.7568%" y="239.50"></text></g><g><title>_nanov2_free (2 samples, 0.05%)</title><rect x="12.5341%" y="229" width="0.0545%" height="15" fill="rgb(222,201,40)" fg:x="460" fg:w="2"/><text x="12.7841%" y="239.50"></text></g><g><title>_platform_memmove (1 samples, 0.03%)</title><rect x="12.8065%" y="149" width="0.0272%" height="15" fill="rgb(235,61,29)" fg:x="470" fg:w="1"/><text x="13.0565%" y="159.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::new_node (19 samples, 0.52%)</title><rect x="12.5886%" y="229" width="0.5177%" height="15" fill="rgb(219,207,3)" fg:x="462" fg:w="19"/><text x="12.8386%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 0.33%)</title><rect x="12.7793%" y="213" width="0.3270%" height="15" fill="rgb(222,56,46)" fg:x="469" fg:w="12"/><text x="13.0293%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.33%)</title><rect x="12.7793%" y="197" width="0.3270%" height="15" fill="rgb(239,76,54)" fg:x="469" fg:w="12"/><text x="13.0293%" y="207.50"></text></g><g><title>_realloc (11 samples, 0.30%)</title><rect x="12.8065%" y="181" width="0.2997%" height="15" fill="rgb(231,124,27)" fg:x="470" fg:w="11"/><text x="13.0565%" y="191.50"></text></g><g><title>_malloc_zone_realloc (11 samples, 0.30%)</title><rect x="12.8065%" y="165" width="0.2997%" height="15" fill="rgb(249,195,6)" fg:x="470" fg:w="11"/><text x="13.0565%" y="175.50"></text></g><g><title>szone_realloc (10 samples, 0.27%)</title><rect x="12.8338%" y="149" width="0.2725%" height="15" fill="rgb(237,174,47)" fg:x="471" fg:w="10"/><text x="13.0838%" y="159.50"></text></g><g><title>_platform_memmove (9 samples, 0.25%)</title><rect x="12.8610%" y="133" width="0.2452%" height="15" fill="rgb(206,201,31)" fg:x="472" fg:w="9"/><text x="13.1110%" y="143.50"></text></g><g><title>indextree::relations::connect_neighbors (1 samples, 0.03%)</title><rect x="13.1335%" y="213" width="0.0272%" height="15" fill="rgb(231,57,52)" fg:x="482" fg:w="1"/><text x="13.3835%" y="223.50"></text></g><g><title>indextree::id::NodeId::checked_append (5 samples, 0.14%)</title><rect x="13.1063%" y="229" width="0.1362%" height="15" fill="rgb(248,177,22)" fg:x="481" fg:w="5"/><text x="13.3563%" y="239.50"></text></g><g><title>indextree::relations::insert_with_neighbors (3 samples, 0.08%)</title><rect x="13.1608%" y="213" width="0.0817%" height="15" fill="rgb(215,211,37)" fg:x="483" fg:w="3"/><text x="13.4108%" y="223.50"></text></g><g><title>indextree::siblings_range::DetachedSiblingsRange::transplant (2 samples, 0.05%)</title><rect x="13.1880%" y="197" width="0.0545%" height="15" fill="rgb(241,128,51)" fg:x="484" fg:w="2"/><text x="13.4380%" y="207.50"></text></g><g><title>indextree::relations::connect_neighbors (1 samples, 0.03%)</title><rect x="13.2153%" y="181" width="0.0272%" height="15" fill="rgb(227,165,31)" fg:x="485" fg:w="1"/><text x="13.4653%" y="191.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (3 samples, 0.08%)</title><rect x="13.2425%" y="229" width="0.0817%" height="15" fill="rgb(228,167,24)" fg:x="486" fg:w="3"/><text x="13.4925%" y="239.50"></text></g><g><title>core::num::dec2flt::lemire::compute_float (1 samples, 0.03%)</title><rect x="13.3515%" y="197" width="0.0272%" height="15" fill="rgb(228,143,12)" fg:x="490" fg:w="1"/><text x="13.6015%" y="207.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (9 samples, 0.25%)</title><rect x="13.3515%" y="213" width="0.2452%" height="15" fill="rgb(249,149,8)" fg:x="490" fg:w="9"/><text x="13.6015%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (8 samples, 0.22%)</title><rect x="13.3787%" y="197" width="0.2180%" height="15" fill="rgb(243,35,44)" fg:x="491" fg:w="8"/><text x="13.6287%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.05%)</title><rect x="13.7875%" y="197" width="0.0545%" height="15" fill="rgb(246,89,9)" fg:x="506" fg:w="2"/><text x="14.0375%" y="207.50"></text></g><g><title>DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="13.9782%" y="149" width="0.0272%" height="15" fill="rgb(233,213,13)" fg:x="513" fg:w="1"/><text x="14.2282%" y="159.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (7 samples, 0.19%)</title><rect x="13.8420%" y="197" width="0.1907%" height="15" fill="rgb(233,141,41)" fg:x="508" fg:w="7"/><text x="14.0920%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (3 samples, 0.08%)</title><rect x="13.9510%" y="181" width="0.0817%" height="15" fill="rgb(239,167,4)" fg:x="512" fg:w="3"/><text x="14.2010%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (3 samples, 0.08%)</title><rect x="13.9510%" y="165" width="0.0817%" height="15" fill="rgb(209,217,16)" fg:x="512" fg:w="3"/><text x="14.2010%" y="175.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="14.0054%" y="149" width="0.0272%" height="15" fill="rgb(219,88,35)" fg:x="514" fg:w="1"/><text x="14.2554%" y="159.50"></text></g><g><title>_nanov2_free (4 samples, 0.11%)</title><rect x="14.0327%" y="197" width="0.1090%" height="15" fill="rgb(220,193,23)" fg:x="515" fg:w="4"/><text x="14.2827%" y="207.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="14.1417%" y="197" width="0.0272%" height="15" fill="rgb(230,90,52)" fg:x="519" fg:w="1"/><text x="14.3917%" y="207.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (106 samples, 2.89%)</title><rect x="14.5777%" y="165" width="2.8883%" height="15" fill="rgb(252,106,19)" fg:x="535" fg:w="106"/><text x="14.8277%" y="175.50">re..</text></g><g><title>regex_automata::hybrid::search::find_fwd (102 samples, 2.78%)</title><rect x="14.6866%" y="149" width="2.7793%" height="15" fill="rgb(206,74,20)" fg:x="539" fg:w="102"/><text x="14.9366%" y="159.50">re..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (113 samples, 3.08%)</title><rect x="14.5232%" y="181" width="3.0790%" height="15" fill="rgb(230,138,44)" fg:x="533" fg:w="113"/><text x="14.7732%" y="191.50">&lt;re..</text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.14%)</title><rect x="17.4659%" y="165" width="0.1362%" height="15" fill="rgb(235,182,43)" fg:x="641" fg:w="5"/><text x="17.7159%" y="175.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.03%)</title><rect x="17.6022%" y="181" width="0.0272%" height="15" fill="rgb(242,16,51)" fg:x="646" fg:w="1"/><text x="17.8522%" y="191.50"></text></g><g><title>regex::regex::string::Regex::find_at (128 samples, 3.49%)</title><rect x="14.1689%" y="197" width="3.4877%" height="15" fill="rgb(248,9,4)" fg:x="520" fg:w="128"/><text x="14.4189%" y="207.50">reg..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="17.6294%" y="181" width="0.0272%" height="15" fill="rgb(210,31,22)" fg:x="647" fg:w="1"/><text x="17.8794%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (1 samples, 0.03%)</title><rect x="17.6567%" y="197" width="0.0272%" height="15" fill="rgb(239,54,39)" fg:x="648" fg:w="1"/><text x="17.9067%" y="207.50"></text></g><g><title>DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="17.6839%" y="181" width="0.0272%" height="15" fill="rgb(230,99,41)" fg:x="649" fg:w="1"/><text x="17.9339%" y="191.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.11%)</title><rect x="17.7112%" y="181" width="0.1090%" height="15" fill="rgb(253,106,12)" fg:x="650" fg:w="4"/><text x="17.9612%" y="191.50"></text></g><g><title>regex_automata::util::captures::Captures::all (8 samples, 0.22%)</title><rect x="17.6839%" y="197" width="0.2180%" height="15" fill="rgb(213,46,41)" fg:x="649" fg:w="8"/><text x="17.9339%" y="207.50"></text></g><g><title>nanov2_malloc (3 samples, 0.08%)</title><rect x="17.8202%" y="181" width="0.0817%" height="15" fill="rgb(215,133,35)" fg:x="654" fg:w="3"/><text x="18.0702%" y="191.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (159 samples, 4.33%)</title><rect x="13.5967%" y="213" width="4.3324%" height="15" fill="rgb(213,28,5)" fg:x="499" fg:w="159"/><text x="13.8467%" y="223.50">nexus..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="17.9019%" y="197" width="0.0272%" height="15" fill="rgb(215,77,49)" fg:x="657" fg:w="1"/><text x="18.1519%" y="207.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (174 samples, 4.74%)</title><rect x="13.3243%" y="229" width="4.7411%" height="15" fill="rgb(248,100,22)" fg:x="489" fg:w="174"/><text x="13.5743%" y="239.50">nexus:..</text></g><g><title>regex::regex::string::Regex::find_at (5 samples, 0.14%)</title><rect x="17.9292%" y="213" width="0.1362%" height="15" fill="rgb(208,67,9)" fg:x="658" fg:w="5"/><text x="18.1792%" y="223.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="18.0926%" y="213" width="0.0272%" height="15" fill="rgb(219,133,21)" fg:x="664" fg:w="1"/><text x="18.3426%" y="223.50"></text></g><g><title>_nanov2_free (3 samples, 0.08%)</title><rect x="18.1199%" y="213" width="0.0817%" height="15" fill="rgb(246,46,29)" fg:x="665" fg:w="3"/><text x="18.3699%" y="223.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.03%)</title><rect x="18.2016%" y="213" width="0.0272%" height="15" fill="rgb(246,185,52)" fg:x="668" fg:w="1"/><text x="18.4516%" y="223.50"></text></g><g><title>_platform_memmove (1 samples, 0.03%)</title><rect x="18.3106%" y="133" width="0.0272%" height="15" fill="rgb(252,136,11)" fg:x="672" fg:w="1"/><text x="18.5606%" y="143.50"></text></g><g><title>_platform_memmove (16 samples, 0.44%)</title><rect x="18.3379%" y="117" width="0.4360%" height="15" fill="rgb(219,138,53)" fg:x="673" fg:w="16"/><text x="18.5879%" y="127.50"></text></g><g><title>szone_realloc (17 samples, 0.46%)</title><rect x="18.3379%" y="133" width="0.4632%" height="15" fill="rgb(211,51,23)" fg:x="673" fg:w="17"/><text x="18.5879%" y="143.50"></text></g><g><title>free_tiny (1 samples, 0.03%)</title><rect x="18.7738%" y="117" width="0.0272%" height="15" fill="rgb(247,221,28)" fg:x="689" fg:w="1"/><text x="19.0238%" y="127.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="18.7738%" y="101" width="0.0272%" height="15" fill="rgb(251,222,45)" fg:x="689" fg:w="1"/><text x="19.0238%" y="111.50"></text></g><g><title>_malloc_zone_realloc (19 samples, 0.52%)</title><rect x="18.3106%" y="149" width="0.5177%" height="15" fill="rgb(217,162,53)" fg:x="672" fg:w="19"/><text x="18.5606%" y="159.50"></text></g><g><title>szone_size (1 samples, 0.03%)</title><rect x="18.8011%" y="133" width="0.0272%" height="15" fill="rgb(229,93,14)" fg:x="690" fg:w="1"/><text x="19.0511%" y="143.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::new_node (24 samples, 0.65%)</title><rect x="18.2289%" y="213" width="0.6540%" height="15" fill="rgb(209,67,49)" fg:x="669" fg:w="24"/><text x="18.4789%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (21 samples, 0.57%)</title><rect x="18.3106%" y="197" width="0.5722%" height="15" fill="rgb(213,87,29)" fg:x="672" fg:w="21"/><text x="18.5606%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.57%)</title><rect x="18.3106%" y="181" width="0.5722%" height="15" fill="rgb(205,151,52)" fg:x="672" fg:w="21"/><text x="18.5606%" y="191.50"></text></g><g><title>_realloc (21 samples, 0.57%)</title><rect x="18.3106%" y="165" width="0.5722%" height="15" fill="rgb(253,215,39)" fg:x="672" fg:w="21"/><text x="18.5606%" y="175.50"></text></g><g><title>szone_size (2 samples, 0.05%)</title><rect x="18.8283%" y="149" width="0.0545%" height="15" fill="rgb(221,220,41)" fg:x="691" fg:w="2"/><text x="19.0783%" y="159.50"></text></g><g><title>tiny_size (2 samples, 0.05%)</title><rect x="18.8283%" y="133" width="0.0545%" height="15" fill="rgb(218,133,21)" fg:x="691" fg:w="2"/><text x="19.0783%" y="143.50"></text></g><g><title>indextree::relations::connect_neighbors (1 samples, 0.03%)</title><rect x="18.9918%" y="181" width="0.0272%" height="15" fill="rgb(221,193,43)" fg:x="697" fg:w="1"/><text x="19.2418%" y="191.50"></text></g><g><title>indextree::id::NodeId::checked_append (7 samples, 0.19%)</title><rect x="18.8828%" y="213" width="0.1907%" height="15" fill="rgb(240,128,52)" fg:x="693" fg:w="7"/><text x="19.1328%" y="223.50"></text></g><g><title>indextree::relations::insert_with_neighbors (5 samples, 0.14%)</title><rect x="18.9373%" y="197" width="0.1362%" height="15" fill="rgb(253,114,12)" fg:x="695" fg:w="5"/><text x="19.1873%" y="207.50"></text></g><g><title>indextree::siblings_range::DetachedSiblingsRange::transplant (2 samples, 0.05%)</title><rect x="19.0191%" y="181" width="0.0545%" height="15" fill="rgb(215,223,47)" fg:x="698" fg:w="2"/><text x="19.2691%" y="191.50"></text></g><g><title>indextree::relations::connect_neighbors (1 samples, 0.03%)</title><rect x="19.0463%" y="165" width="0.0272%" height="15" fill="rgb(248,225,23)" fg:x="699" fg:w="1"/><text x="19.2963%" y="175.50"></text></g><g><title>indextree::relations::insert_with_neighbors (1 samples, 0.03%)</title><rect x="19.0736%" y="213" width="0.0272%" height="15" fill="rgb(250,108,0)" fg:x="700" fg:w="1"/><text x="19.3236%" y="223.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (5 samples, 0.14%)</title><rect x="19.1008%" y="213" width="0.1362%" height="15" fill="rgb(228,208,7)" fg:x="701" fg:w="5"/><text x="19.3508%" y="223.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (6 samples, 0.16%)</title><rect x="19.2916%" y="197" width="0.1635%" height="15" fill="rgb(244,45,10)" fg:x="708" fg:w="6"/><text x="19.5416%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (4 samples, 0.11%)</title><rect x="19.3460%" y="181" width="0.1090%" height="15" fill="rgb(207,125,25)" fg:x="710" fg:w="4"/><text x="19.5960%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="19.7275%" y="181" width="0.0272%" height="15" fill="rgb(210,195,18)" fg:x="724" fg:w="1"/><text x="19.9775%" y="191.50"></text></g><g><title>DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="19.8638%" y="133" width="0.0272%" height="15" fill="rgb(249,80,12)" fg:x="729" fg:w="1"/><text x="20.1138%" y="143.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (7 samples, 0.19%)</title><rect x="19.7548%" y="181" width="0.1907%" height="15" fill="rgb(221,65,9)" fg:x="725" fg:w="7"/><text x="20.0048%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (7 samples, 0.19%)</title><rect x="19.7548%" y="165" width="0.1907%" height="15" fill="rgb(235,49,36)" fg:x="725" fg:w="7"/><text x="20.0048%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (6 samples, 0.16%)</title><rect x="19.7820%" y="149" width="0.1635%" height="15" fill="rgb(225,32,20)" fg:x="726" fg:w="6"/><text x="20.0320%" y="159.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="19.8910%" y="133" width="0.0545%" height="15" fill="rgb(215,141,46)" fg:x="730" fg:w="2"/><text x="20.1410%" y="143.50"></text></g><g><title>_free (2 samples, 0.05%)</title><rect x="19.9455%" y="181" width="0.0545%" height="15" fill="rgb(250,160,47)" fg:x="732" fg:w="2"/><text x="20.1955%" y="191.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="20.0000%" y="181" width="0.0272%" height="15" fill="rgb(216,222,40)" fg:x="734" fg:w="1"/><text x="20.2500%" y="191.50"></text></g><g><title>_nanov2_free (7 samples, 0.19%)</title><rect x="20.0272%" y="181" width="0.1907%" height="15" fill="rgb(234,217,39)" fg:x="735" fg:w="7"/><text x="20.2772%" y="191.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="20.1635%" y="165" width="0.0545%" height="15" fill="rgb(207,178,40)" fg:x="740" fg:w="2"/><text x="20.4135%" y="175.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="20.2180%" y="181" width="0.0272%" height="15" fill="rgb(221,136,13)" fg:x="742" fg:w="1"/><text x="20.4680%" y="191.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (118 samples, 3.22%)</title><rect x="20.7902%" y="149" width="3.2153%" height="15" fill="rgb(249,199,10)" fg:x="763" fg:w="118"/><text x="21.0402%" y="159.50">reg..</text></g><g><title>regex_automata::hybrid::search::find_fwd (108 samples, 2.94%)</title><rect x="21.0627%" y="133" width="2.9428%" height="15" fill="rgb(249,222,13)" fg:x="773" fg:w="108"/><text x="21.3127%" y="143.50">re..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (128 samples, 3.49%)</title><rect x="20.6540%" y="165" width="3.4877%" height="15" fill="rgb(244,185,38)" fg:x="758" fg:w="128"/><text x="20.9040%" y="175.50">&lt;re..</text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.14%)</title><rect x="24.0054%" y="149" width="0.1362%" height="15" fill="rgb(236,202,9)" fg:x="881" fg:w="5"/><text x="24.2554%" y="159.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.05%)</title><rect x="24.1417%" y="165" width="0.0545%" height="15" fill="rgb(250,229,37)" fg:x="886" fg:w="2"/><text x="24.3917%" y="175.50"></text></g><g><title>regex::regex::string::Regex::find_at (146 samples, 3.98%)</title><rect x="20.2452%" y="181" width="3.9782%" height="15" fill="rgb(206,174,23)" fg:x="743" fg:w="146"/><text x="20.4952%" y="191.50">rege..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="24.1962%" y="165" width="0.0272%" height="15" fill="rgb(211,33,43)" fg:x="888" fg:w="1"/><text x="24.4462%" y="175.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (2 samples, 0.05%)</title><rect x="24.2234%" y="181" width="0.0545%" height="15" fill="rgb(245,58,50)" fg:x="889" fg:w="2"/><text x="24.4734%" y="191.50"></text></g><g><title>DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="24.2779%" y="165" width="0.0272%" height="15" fill="rgb(244,68,36)" fg:x="891" fg:w="1"/><text x="24.5279%" y="175.50"></text></g><g><title>regex_automata::util::captures::Captures::all (2 samples, 0.05%)</title><rect x="24.2779%" y="181" width="0.0545%" height="15" fill="rgb(232,229,15)" fg:x="891" fg:w="2"/><text x="24.5279%" y="191.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="24.3052%" y="165" width="0.0272%" height="15" fill="rgb(254,30,23)" fg:x="892" fg:w="1"/><text x="24.5552%" y="175.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (180 samples, 4.90%)</title><rect x="19.4550%" y="197" width="4.9046%" height="15" fill="rgb(235,160,14)" fg:x="714" fg:w="180"/><text x="19.7050%" y="207.50">nexus:..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="24.3324%" y="181" width="0.0272%" height="15" fill="rgb(212,155,44)" fg:x="893" fg:w="1"/><text x="24.5824%" y="191.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (189 samples, 5.15%)</title><rect x="19.2371%" y="213" width="5.1499%" height="15" fill="rgb(226,2,50)" fg:x="706" fg:w="189"/><text x="19.4871%" y="223.50">nexus:..</text></g><g><title>regex::regex::string::Regex::find_at (1 samples, 0.03%)</title><rect x="24.3597%" y="197" width="0.0272%" height="15" fill="rgb(234,177,6)" fg:x="894" fg:w="1"/><text x="24.6097%" y="207.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="24.4142%" y="197" width="0.0272%" height="15" fill="rgb(217,24,9)" fg:x="896" fg:w="1"/><text x="24.6642%" y="207.50"></text></g><g><title>_nanov2_free (2 samples, 0.05%)</title><rect x="24.4414%" y="197" width="0.0545%" height="15" fill="rgb(220,13,46)" fg:x="897" fg:w="2"/><text x="24.6914%" y="207.50"></text></g><g><title>_platform_memmove (2 samples, 0.05%)</title><rect x="24.6049%" y="101" width="0.0545%" height="15" fill="rgb(239,221,27)" fg:x="903" fg:w="2"/><text x="24.8549%" y="111.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::new_node (7 samples, 0.19%)</title><rect x="24.4959%" y="197" width="0.1907%" height="15" fill="rgb(222,198,25)" fg:x="899" fg:w="7"/><text x="24.7459%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.08%)</title><rect x="24.6049%" y="181" width="0.0817%" height="15" fill="rgb(211,99,13)" fg:x="903" fg:w="3"/><text x="24.8549%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.08%)</title><rect x="24.6049%" y="165" width="0.0817%" height="15" fill="rgb(232,111,31)" fg:x="903" fg:w="3"/><text x="24.8549%" y="175.50"></text></g><g><title>_realloc (3 samples, 0.08%)</title><rect x="24.6049%" y="149" width="0.0817%" height="15" fill="rgb(245,82,37)" fg:x="903" fg:w="3"/><text x="24.8549%" y="159.50"></text></g><g><title>_malloc_zone_realloc (3 samples, 0.08%)</title><rect x="24.6049%" y="133" width="0.0817%" height="15" fill="rgb(227,149,46)" fg:x="903" fg:w="3"/><text x="24.8549%" y="143.50"></text></g><g><title>szone_realloc (3 samples, 0.08%)</title><rect x="24.6049%" y="117" width="0.0817%" height="15" fill="rgb(218,36,50)" fg:x="903" fg:w="3"/><text x="24.8549%" y="127.50"></text></g><g><title>free_small (1 samples, 0.03%)</title><rect x="24.6594%" y="101" width="0.0272%" height="15" fill="rgb(226,80,48)" fg:x="905" fg:w="1"/><text x="24.9094%" y="111.50"></text></g><g><title>indextree::relations::connect_neighbors (1 samples, 0.03%)</title><rect x="24.7411%" y="181" width="0.0272%" height="15" fill="rgb(238,224,15)" fg:x="908" fg:w="1"/><text x="24.9911%" y="191.50"></text></g><g><title>indextree::id::NodeId::checked_append (5 samples, 0.14%)</title><rect x="24.6866%" y="197" width="0.1362%" height="15" fill="rgb(241,136,10)" fg:x="906" fg:w="5"/><text x="24.9366%" y="207.50"></text></g><g><title>indextree::relations::insert_with_neighbors (2 samples, 0.05%)</title><rect x="24.7684%" y="181" width="0.0545%" height="15" fill="rgb(208,32,45)" fg:x="909" fg:w="2"/><text x="25.0184%" y="191.50"></text></g><g><title>indextree::siblings_range::DetachedSiblingsRange::transplant (1 samples, 0.03%)</title><rect x="24.7956%" y="165" width="0.0272%" height="15" fill="rgb(207,135,9)" fg:x="910" fg:w="1"/><text x="25.0456%" y="175.50"></text></g><g><title>indextree::relations::connect_neighbors (1 samples, 0.03%)</title><rect x="24.7956%" y="149" width="0.0272%" height="15" fill="rgb(206,86,44)" fg:x="910" fg:w="1"/><text x="25.0456%" y="159.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (3 samples, 0.08%)</title><rect x="24.8229%" y="197" width="0.0817%" height="15" fill="rgb(245,177,15)" fg:x="911" fg:w="3"/><text x="25.0729%" y="207.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="24.9046%" y="181" width="0.0272%" height="15" fill="rgb(206,64,50)" fg:x="914" fg:w="1"/><text x="25.1546%" y="191.50"></text></g><g><title>core::num::dec2flt::lemire::compute_float (3 samples, 0.08%)</title><rect x="24.9319%" y="165" width="0.0817%" height="15" fill="rgb(234,36,40)" fg:x="915" fg:w="3"/><text x="25.1819%" y="175.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (9 samples, 0.25%)</title><rect x="24.9319%" y="181" width="0.2452%" height="15" fill="rgb(213,64,8)" fg:x="915" fg:w="9"/><text x="25.1819%" y="191.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (6 samples, 0.16%)</title><rect x="25.0136%" y="165" width="0.1635%" height="15" fill="rgb(210,75,36)" fg:x="918" fg:w="6"/><text x="25.2636%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.11%)</title><rect x="25.2316%" y="165" width="0.1090%" height="15" fill="rgb(229,88,21)" fg:x="926" fg:w="4"/><text x="25.4816%" y="175.50"></text></g><g><title>DYLD-STUB$$bzero (3 samples, 0.08%)</title><rect x="25.6131%" y="117" width="0.0817%" height="15" fill="rgb(252,204,47)" fg:x="940" fg:w="3"/><text x="25.8631%" y="127.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (17 samples, 0.46%)</title><rect x="25.3406%" y="165" width="0.4632%" height="15" fill="rgb(208,77,27)" fg:x="930" fg:w="17"/><text x="25.5906%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (15 samples, 0.41%)</title><rect x="25.3951%" y="149" width="0.4087%" height="15" fill="rgb(221,76,26)" fg:x="932" fg:w="15"/><text x="25.6451%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (15 samples, 0.41%)</title><rect x="25.3951%" y="133" width="0.4087%" height="15" fill="rgb(225,139,18)" fg:x="932" fg:w="15"/><text x="25.6451%" y="143.50"></text></g><g><title>_platform_memset (4 samples, 0.11%)</title><rect x="25.6948%" y="117" width="0.1090%" height="15" fill="rgb(230,137,11)" fg:x="943" fg:w="4"/><text x="25.9448%" y="127.50"></text></g><g><title>_nanov2_free (7 samples, 0.19%)</title><rect x="25.8038%" y="165" width="0.1907%" height="15" fill="rgb(212,28,1)" fg:x="947" fg:w="7"/><text x="26.0538%" y="175.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="25.9673%" y="149" width="0.0272%" height="15" fill="rgb(248,164,17)" fg:x="953" fg:w="1"/><text x="26.2173%" y="159.50"></text></g><g><title>free (1 samples, 0.03%)</title><rect x="25.9946%" y="165" width="0.0272%" height="15" fill="rgb(222,171,42)" fg:x="954" fg:w="1"/><text x="26.2446%" y="175.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (99 samples, 2.70%)</title><rect x="26.4850%" y="133" width="2.6975%" height="15" fill="rgb(243,84,45)" fg:x="972" fg:w="99"/><text x="26.7350%" y="143.50">re..</text></g><g><title>regex_automata::hybrid::search::find_fwd (84 samples, 2.29%)</title><rect x="26.8937%" y="117" width="2.2888%" height="15" fill="rgb(252,49,23)" fg:x="987" fg:w="84"/><text x="27.1437%" y="127.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (104 samples, 2.83%)</title><rect x="26.3760%" y="149" width="2.8338%" height="15" fill="rgb(215,19,7)" fg:x="968" fg:w="104"/><text x="26.6260%" y="159.50">&lt;r..</text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="29.1826%" y="133" width="0.0272%" height="15" fill="rgb(238,81,41)" fg:x="1071" fg:w="1"/><text x="29.4326%" y="143.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.08%)</title><rect x="29.2098%" y="149" width="0.0817%" height="15" fill="rgb(210,199,37)" fg:x="1072" fg:w="3"/><text x="29.4598%" y="159.50"></text></g><g><title>regex::regex::string::Regex::find_at (125 samples, 3.41%)</title><rect x="26.0218%" y="165" width="3.4060%" height="15" fill="rgb(244,192,49)" fg:x="955" fg:w="125"/><text x="26.2718%" y="175.50">reg..</text></g><g><title>tlv_get_addr (5 samples, 0.14%)</title><rect x="29.2916%" y="149" width="0.1362%" height="15" fill="rgb(226,211,11)" fg:x="1075" fg:w="5"/><text x="29.5416%" y="159.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (2 samples, 0.05%)</title><rect x="29.4278%" y="165" width="0.0545%" height="15" fill="rgb(236,162,54)" fg:x="1080" fg:w="2"/><text x="29.6778%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="29.5368%" y="149" width="0.0272%" height="15" fill="rgb(220,229,9)" fg:x="1084" fg:w="1"/><text x="29.7868%" y="159.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="29.5640%" y="149" width="0.0545%" height="15" fill="rgb(250,87,22)" fg:x="1085" fg:w="2"/><text x="29.8140%" y="159.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (164 samples, 4.47%)</title><rect x="25.1771%" y="181" width="4.4687%" height="15" fill="rgb(239,43,17)" fg:x="924" fg:w="164"/><text x="25.4271%" y="191.50">nexus..</text></g><g><title>regex_automata::util::captures::Captures::all (6 samples, 0.16%)</title><rect x="29.4823%" y="165" width="0.1635%" height="15" fill="rgb(231,177,25)" fg:x="1082" fg:w="6"/><text x="29.7323%" y="175.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="29.6185%" y="149" width="0.0272%" height="15" fill="rgb(219,179,1)" fg:x="1087" fg:w="1"/><text x="29.8685%" y="159.50"></text></g><g><title>regex::regex::string::Regex::find_at (3 samples, 0.08%)</title><rect x="29.6458%" y="181" width="0.0817%" height="15" fill="rgb(238,219,53)" fg:x="1088" fg:w="3"/><text x="29.8958%" y="191.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (178 samples, 4.85%)</title><rect x="24.9046%" y="197" width="4.8501%" height="15" fill="rgb(232,167,36)" fg:x="914" fg:w="178"/><text x="25.1546%" y="207.50">nexus:..</text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="29.7275%" y="181" width="0.0272%" height="15" fill="rgb(244,19,51)" fg:x="1091" fg:w="1"/><text x="29.9775%" y="191.50"></text></g><g><title>_free (2 samples, 0.05%)</title><rect x="29.7820%" y="181" width="0.0545%" height="15" fill="rgb(224,6,22)" fg:x="1093" fg:w="2"/><text x="30.0320%" y="191.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="29.8638%" y="117" width="0.0272%" height="15" fill="rgb(224,145,5)" fg:x="1096" fg:w="1"/><text x="30.1138%" y="127.50"></text></g><g><title>szone_realloc (1 samples, 0.03%)</title><rect x="29.8638%" y="101" width="0.0272%" height="15" fill="rgb(234,130,49)" fg:x="1096" fg:w="1"/><text x="30.1138%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.05%)</title><rect x="29.8638%" y="165" width="0.0545%" height="15" fill="rgb(254,6,2)" fg:x="1096" fg:w="2"/><text x="30.1138%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="29.8638%" y="149" width="0.0545%" height="15" fill="rgb(208,96,46)" fg:x="1096" fg:w="2"/><text x="30.1138%" y="159.50"></text></g><g><title>_realloc (2 samples, 0.05%)</title><rect x="29.8638%" y="133" width="0.0545%" height="15" fill="rgb(239,3,39)" fg:x="1096" fg:w="2"/><text x="30.1138%" y="143.50"></text></g><g><title>szone_size (1 samples, 0.03%)</title><rect x="29.8910%" y="117" width="0.0272%" height="15" fill="rgb(233,210,1)" fg:x="1097" fg:w="1"/><text x="30.1410%" y="127.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::new_node (4 samples, 0.11%)</title><rect x="29.8365%" y="181" width="0.1090%" height="15" fill="rgb(244,137,37)" fg:x="1095" fg:w="4"/><text x="30.0865%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="29.9183%" y="165" width="0.0272%" height="15" fill="rgb(240,136,2)" fg:x="1098" fg:w="1"/><text x="30.1683%" y="175.50"></text></g><g><title>indextree::id::NodeId::checked_append (3 samples, 0.08%)</title><rect x="29.9455%" y="181" width="0.0817%" height="15" fill="rgb(239,18,37)" fg:x="1099" fg:w="3"/><text x="30.1955%" y="191.50"></text></g><g><title>indextree::relations::insert_with_neighbors (2 samples, 0.05%)</title><rect x="29.9728%" y="165" width="0.0545%" height="15" fill="rgb(218,185,22)" fg:x="1100" fg:w="2"/><text x="30.2228%" y="175.50"></text></g><g><title>indextree::siblings_range::DetachedSiblingsRange::transplant (1 samples, 0.03%)</title><rect x="30.0000%" y="149" width="0.0272%" height="15" fill="rgb(225,218,4)" fg:x="1101" fg:w="1"/><text x="30.2500%" y="159.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (1 samples, 0.03%)</title><rect x="30.0272%" y="181" width="0.0272%" height="15" fill="rgb(230,182,32)" fg:x="1102" fg:w="1"/><text x="30.2772%" y="191.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="30.0817%" y="165" width="0.0272%" height="15" fill="rgb(242,56,43)" fg:x="1104" fg:w="1"/><text x="30.3317%" y="175.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (6 samples, 0.16%)</title><rect x="30.1090%" y="165" width="0.1635%" height="15" fill="rgb(233,99,24)" fg:x="1105" fg:w="6"/><text x="30.3590%" y="175.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (4 samples, 0.11%)</title><rect x="30.1635%" y="149" width="0.1090%" height="15" fill="rgb(234,209,42)" fg:x="1107" fg:w="4"/><text x="30.4135%" y="159.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="30.3270%" y="149" width="0.0272%" height="15" fill="rgb(227,7,12)" fg:x="1113" fg:w="1"/><text x="30.5770%" y="159.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="30.3815%" y="117" width="0.0272%" height="15" fill="rgb(245,203,43)" fg:x="1115" fg:w="1"/><text x="30.6315%" y="127.50"></text></g><g><title>DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="30.5177%" y="101" width="0.0272%" height="15" fill="rgb(238,205,33)" fg:x="1120" fg:w="1"/><text x="30.7677%" y="111.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (8 samples, 0.22%)</title><rect x="30.3542%" y="149" width="0.2180%" height="15" fill="rgb(231,56,7)" fg:x="1114" fg:w="8"/><text x="30.6042%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (7 samples, 0.19%)</title><rect x="30.3815%" y="133" width="0.1907%" height="15" fill="rgb(244,186,29)" fg:x="1115" fg:w="7"/><text x="30.6315%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (6 samples, 0.16%)</title><rect x="30.4087%" y="117" width="0.1635%" height="15" fill="rgb(234,111,31)" fg:x="1116" fg:w="6"/><text x="30.6587%" y="127.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="30.5450%" y="101" width="0.0272%" height="15" fill="rgb(241,149,10)" fg:x="1121" fg:w="1"/><text x="30.7950%" y="111.50"></text></g><g><title>_nanov2_free (5 samples, 0.14%)</title><rect x="30.5722%" y="149" width="0.1362%" height="15" fill="rgb(249,206,44)" fg:x="1122" fg:w="5"/><text x="30.8222%" y="159.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (79 samples, 2.15%)</title><rect x="31.1717%" y="117" width="2.1526%" height="15" fill="rgb(251,153,30)" fg:x="1144" fg:w="79"/><text x="31.4217%" y="127.50">r..</text></g><g><title>regex_automata::hybrid::search::find_fwd (74 samples, 2.02%)</title><rect x="31.3079%" y="101" width="2.0163%" height="15" fill="rgb(239,152,38)" fg:x="1149" fg:w="74"/><text x="31.5579%" y="111.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (83 samples, 2.26%)</title><rect x="31.1172%" y="133" width="2.2616%" height="15" fill="rgb(249,139,47)" fg:x="1142" fg:w="83"/><text x="31.3672%" y="143.50">&lt;..</text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.05%)</title><rect x="33.3243%" y="117" width="0.0545%" height="15" fill="rgb(244,64,35)" fg:x="1223" fg:w="2"/><text x="33.5743%" y="127.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.05%)</title><rect x="33.3787%" y="133" width="0.0545%" height="15" fill="rgb(216,46,15)" fg:x="1225" fg:w="2"/><text x="33.6287%" y="143.50"></text></g><g><title>regex::regex::string::Regex::find_at (102 samples, 2.78%)</title><rect x="30.7084%" y="149" width="2.7793%" height="15" fill="rgb(250,74,19)" fg:x="1127" fg:w="102"/><text x="30.9584%" y="159.50">re..</text></g><g><title>tlv_get_addr (2 samples, 0.05%)</title><rect x="33.4332%" y="133" width="0.0545%" height="15" fill="rgb(249,42,33)" fg:x="1227" fg:w="2"/><text x="33.6832%" y="143.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (119 samples, 3.24%)</title><rect x="30.2725%" y="165" width="3.2425%" height="15" fill="rgb(242,149,17)" fg:x="1111" fg:w="119"/><text x="30.5225%" y="175.50">nex..</text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="33.4877%" y="149" width="0.0272%" height="15" fill="rgb(244,29,21)" fg:x="1229" fg:w="1"/><text x="33.7377%" y="159.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="33.4877%" y="133" width="0.0272%" height="15" fill="rgb(220,130,37)" fg:x="1229" fg:w="1"/><text x="33.7377%" y="143.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (129 samples, 3.51%)</title><rect x="30.0545%" y="181" width="3.5150%" height="15" fill="rgb(211,67,2)" fg:x="1103" fg:w="129"/><text x="30.3045%" y="191.50">nex..</text></g><g><title>regex::regex::string::Regex::find_at (2 samples, 0.05%)</title><rect x="33.5150%" y="165" width="0.0545%" height="15" fill="rgb(235,68,52)" fg:x="1230" fg:w="2"/><text x="33.7650%" y="175.50"></text></g><g><title>_free (2 samples, 0.05%)</title><rect x="33.6240%" y="165" width="0.0545%" height="15" fill="rgb(246,142,3)" fg:x="1234" fg:w="2"/><text x="33.8740%" y="175.50"></text></g><g><title>_platform_memmove (2 samples, 0.05%)</title><rect x="33.6785%" y="69" width="0.0545%" height="15" fill="rgb(241,25,7)" fg:x="1236" fg:w="2"/><text x="33.9285%" y="79.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::new_node (3 samples, 0.08%)</title><rect x="33.6785%" y="165" width="0.0817%" height="15" fill="rgb(242,119,39)" fg:x="1236" fg:w="3"/><text x="33.9285%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.08%)</title><rect x="33.6785%" y="149" width="0.0817%" height="15" fill="rgb(241,98,45)" fg:x="1236" fg:w="3"/><text x="33.9285%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.08%)</title><rect x="33.6785%" y="133" width="0.0817%" height="15" fill="rgb(254,28,30)" fg:x="1236" fg:w="3"/><text x="33.9285%" y="143.50"></text></g><g><title>_realloc (3 samples, 0.08%)</title><rect x="33.6785%" y="117" width="0.0817%" height="15" fill="rgb(241,142,54)" fg:x="1236" fg:w="3"/><text x="33.9285%" y="127.50"></text></g><g><title>_malloc_zone_realloc (3 samples, 0.08%)</title><rect x="33.6785%" y="101" width="0.0817%" height="15" fill="rgb(222,85,15)" fg:x="1236" fg:w="3"/><text x="33.9285%" y="111.50"></text></g><g><title>szone_realloc (3 samples, 0.08%)</title><rect x="33.6785%" y="85" width="0.0817%" height="15" fill="rgb(210,85,47)" fg:x="1236" fg:w="3"/><text x="33.9285%" y="95.50"></text></g><g><title>free_small (1 samples, 0.03%)</title><rect x="33.7330%" y="69" width="0.0272%" height="15" fill="rgb(224,206,25)" fg:x="1238" fg:w="1"/><text x="33.9830%" y="79.50"></text></g><g><title>indextree::id::NodeId::checked_append (1 samples, 0.03%)</title><rect x="33.7602%" y="165" width="0.0272%" height="15" fill="rgb(243,201,19)" fg:x="1239" fg:w="1"/><text x="34.0102%" y="175.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (2 samples, 0.05%)</title><rect x="33.7875%" y="165" width="0.0545%" height="15" fill="rgb(236,59,4)" fg:x="1240" fg:w="2"/><text x="34.0375%" y="175.50"></text></g><g><title>core::num::dec2flt::lemire::compute_float (1 samples, 0.03%)</title><rect x="33.8692%" y="133" width="0.0272%" height="15" fill="rgb(254,179,45)" fg:x="1243" fg:w="1"/><text x="34.1192%" y="143.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (7 samples, 0.19%)</title><rect x="33.8692%" y="149" width="0.1907%" height="15" fill="rgb(226,14,10)" fg:x="1243" fg:w="7"/><text x="34.1192%" y="159.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (6 samples, 0.16%)</title><rect x="33.8965%" y="133" width="0.1635%" height="15" fill="rgb(244,27,41)" fg:x="1244" fg:w="6"/><text x="34.1465%" y="143.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="34.1144%" y="133" width="0.0272%" height="15" fill="rgb(235,35,32)" fg:x="1252" fg:w="1"/><text x="34.3644%" y="143.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="34.1417%" y="85" width="0.0272%" height="15" fill="rgb(218,68,31)" fg:x="1253" fg:w="1"/><text x="34.3917%" y="95.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (2 samples, 0.05%)</title><rect x="34.1417%" y="133" width="0.0545%" height="15" fill="rgb(207,120,37)" fg:x="1253" fg:w="2"/><text x="34.3917%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (2 samples, 0.05%)</title><rect x="34.1417%" y="117" width="0.0545%" height="15" fill="rgb(227,98,0)" fg:x="1253" fg:w="2"/><text x="34.3917%" y="127.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (2 samples, 0.05%)</title><rect x="34.1417%" y="101" width="0.0545%" height="15" fill="rgb(207,7,3)" fg:x="1253" fg:w="2"/><text x="34.3917%" y="111.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="34.1689%" y="85" width="0.0272%" height="15" fill="rgb(206,98,19)" fg:x="1254" fg:w="1"/><text x="34.4189%" y="95.50"></text></g><g><title>_nanov2_free (2 samples, 0.05%)</title><rect x="34.1962%" y="133" width="0.0545%" height="15" fill="rgb(217,5,26)" fg:x="1255" fg:w="2"/><text x="34.4462%" y="143.50"></text></g><g><title>regex::regex::string::Regex::find_at (38 samples, 1.04%)</title><rect x="34.2507%" y="133" width="1.0354%" height="15" fill="rgb(235,190,38)" fg:x="1257" fg:w="38"/><text x="34.5007%" y="143.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (35 samples, 0.95%)</title><rect x="34.3324%" y="117" width="0.9537%" height="15" fill="rgb(247,86,24)" fg:x="1260" fg:w="35"/><text x="34.5824%" y="127.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (34 samples, 0.93%)</title><rect x="34.3597%" y="101" width="0.9264%" height="15" fill="rgb(205,101,16)" fg:x="1261" fg:w="34"/><text x="34.6097%" y="111.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (31 samples, 0.84%)</title><rect x="34.4414%" y="85" width="0.8447%" height="15" fill="rgb(246,168,33)" fg:x="1264" fg:w="31"/><text x="34.6914%" y="95.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="35.2861%" y="117" width="0.0272%" height="15" fill="rgb(231,114,1)" fg:x="1295" fg:w="1"/><text x="35.5361%" y="127.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="35.3134%" y="117" width="0.0272%" height="15" fill="rgb(207,184,53)" fg:x="1296" fg:w="1"/><text x="35.5634%" y="127.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (50 samples, 1.36%)</title><rect x="34.0599%" y="149" width="1.3624%" height="15" fill="rgb(224,95,51)" fg:x="1250" fg:w="50"/><text x="34.3099%" y="159.50"></text></g><g><title>regex_automata::util::captures::Captures::all (5 samples, 0.14%)</title><rect x="35.2861%" y="133" width="0.1362%" height="15" fill="rgb(212,188,45)" fg:x="1295" fg:w="5"/><text x="35.5361%" y="143.50"></text></g><g><title>nanov2_malloc (3 samples, 0.08%)</title><rect x="35.3406%" y="117" width="0.0817%" height="15" fill="rgb(223,154,38)" fg:x="1297" fg:w="3"/><text x="35.5906%" y="127.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (59 samples, 1.61%)</title><rect x="33.8420%" y="165" width="1.6076%" height="15" fill="rgb(251,22,52)" fg:x="1242" fg:w="59"/><text x="34.0920%" y="175.50"></text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="35.4223%" y="149" width="0.0272%" height="15" fill="rgb(229,209,22)" fg:x="1300" fg:w="1"/><text x="35.6723%" y="159.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::new_node (2 samples, 0.05%)</title><rect x="35.4496%" y="149" width="0.0545%" height="15" fill="rgb(234,138,34)" fg:x="1301" fg:w="2"/><text x="35.6996%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="35.4768%" y="133" width="0.0272%" height="15" fill="rgb(212,95,11)" fg:x="1302" fg:w="1"/><text x="35.7268%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="35.4768%" y="117" width="0.0272%" height="15" fill="rgb(240,179,47)" fg:x="1302" fg:w="1"/><text x="35.7268%" y="127.50"></text></g><g><title>_realloc (1 samples, 0.03%)</title><rect x="35.4768%" y="101" width="0.0272%" height="15" fill="rgb(240,163,11)" fg:x="1302" fg:w="1"/><text x="35.7268%" y="111.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="35.4768%" y="85" width="0.0272%" height="15" fill="rgb(236,37,12)" fg:x="1302" fg:w="1"/><text x="35.7268%" y="95.50"></text></g><g><title>szone_realloc (1 samples, 0.03%)</title><rect x="35.4768%" y="69" width="0.0272%" height="15" fill="rgb(232,164,16)" fg:x="1302" fg:w="1"/><text x="35.7268%" y="79.50"></text></g><g><title>small_try_realloc_in_place (1 samples, 0.03%)</title><rect x="35.4768%" y="53" width="0.0272%" height="15" fill="rgb(244,205,15)" fg:x="1302" fg:w="1"/><text x="35.7268%" y="63.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (1 samples, 0.03%)</title><rect x="35.5041%" y="149" width="0.0272%" height="15" fill="rgb(223,117,47)" fg:x="1303" fg:w="1"/><text x="35.7541%" y="159.50"></text></g><g><title>core::num::dec2flt::lemire::compute_float (1 samples, 0.03%)</title><rect x="35.5858%" y="117" width="0.0272%" height="15" fill="rgb(244,107,35)" fg:x="1306" fg:w="1"/><text x="35.8358%" y="127.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3 samples, 0.08%)</title><rect x="35.5586%" y="133" width="0.0817%" height="15" fill="rgb(205,140,8)" fg:x="1305" fg:w="3"/><text x="35.8086%" y="143.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.03%)</title><rect x="35.6131%" y="117" width="0.0272%" height="15" fill="rgb(228,84,46)" fg:x="1307" fg:w="1"/><text x="35.8631%" y="127.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="35.6403%" y="117" width="0.0272%" height="15" fill="rgb(254,188,9)" fg:x="1308" fg:w="1"/><text x="35.8903%" y="127.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (3 samples, 0.08%)</title><rect x="35.6676%" y="117" width="0.0817%" height="15" fill="rgb(206,112,54)" fg:x="1309" fg:w="3"/><text x="35.9176%" y="127.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (2 samples, 0.05%)</title><rect x="35.6948%" y="101" width="0.0545%" height="15" fill="rgb(216,84,49)" fg:x="1310" fg:w="2"/><text x="35.9448%" y="111.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (2 samples, 0.05%)</title><rect x="35.6948%" y="85" width="0.0545%" height="15" fill="rgb(214,194,35)" fg:x="1310" fg:w="2"/><text x="35.9448%" y="95.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="35.7493%" y="117" width="0.0272%" height="15" fill="rgb(249,28,3)" fg:x="1312" fg:w="1"/><text x="35.9993%" y="127.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="35.7493%" y="101" width="0.0272%" height="15" fill="rgb(222,56,52)" fg:x="1312" fg:w="1"/><text x="35.9993%" y="111.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (16 samples, 0.44%)</title><rect x="35.8856%" y="85" width="0.4360%" height="15" fill="rgb(245,217,50)" fg:x="1317" fg:w="16"/><text x="36.1356%" y="95.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (14 samples, 0.38%)</title><rect x="35.9401%" y="69" width="0.3815%" height="15" fill="rgb(213,201,24)" fg:x="1319" fg:w="14"/><text x="36.1901%" y="79.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (18 samples, 0.49%)</title><rect x="35.8583%" y="101" width="0.4905%" height="15" fill="rgb(248,116,28)" fg:x="1316" fg:w="18"/><text x="36.1083%" y="111.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="36.3215%" y="85" width="0.0272%" height="15" fill="rgb(219,72,43)" fg:x="1333" fg:w="1"/><text x="36.5715%" y="95.50"></text></g><g><title>regex::regex::string::Regex::find_at (22 samples, 0.60%)</title><rect x="35.7766%" y="117" width="0.5995%" height="15" fill="rgb(209,138,14)" fg:x="1313" fg:w="22"/><text x="36.0266%" y="127.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.03%)</title><rect x="36.3488%" y="101" width="0.0272%" height="15" fill="rgb(222,18,33)" fg:x="1334" fg:w="1"/><text x="36.5988%" y="111.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (32 samples, 0.87%)</title><rect x="35.5313%" y="149" width="0.8719%" height="15" fill="rgb(213,199,7)" fg:x="1304" fg:w="32"/><text x="35.7813%" y="159.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (28 samples, 0.76%)</title><rect x="35.6403%" y="133" width="0.7629%" height="15" fill="rgb(250,110,10)" fg:x="1308" fg:w="28"/><text x="35.8903%" y="143.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (1 samples, 0.03%)</title><rect x="36.3760%" y="117" width="0.0272%" height="15" fill="rgb(248,123,6)" fg:x="1335" fg:w="1"/><text x="36.6260%" y="127.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::group_info (1 samples, 0.03%)</title><rect x="36.3760%" y="101" width="0.0272%" height="15" fill="rgb(206,91,31)" fg:x="1335" fg:w="1"/><text x="36.6260%" y="111.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.03%)</title><rect x="36.4033%" y="117" width="0.0272%" height="15" fill="rgb(211,154,13)" fg:x="1336" fg:w="1"/><text x="36.6533%" y="127.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.03%)</title><rect x="36.4033%" y="101" width="0.0272%" height="15" fill="rgb(225,148,7)" fg:x="1336" fg:w="1"/><text x="36.6533%" y="111.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (7 samples, 0.19%)</title><rect x="36.4033%" y="133" width="0.1907%" height="15" fill="rgb(220,160,43)" fg:x="1336" fg:w="7"/><text x="36.6533%" y="143.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (6 samples, 0.16%)</title><rect x="36.4305%" y="117" width="0.1635%" height="15" fill="rgb(213,52,39)" fg:x="1337" fg:w="6"/><text x="36.6805%" y="127.50"></text></g><g><title>regex::regex::string::Regex::find_at (6 samples, 0.16%)</title><rect x="36.4305%" y="101" width="0.1635%" height="15" fill="rgb(243,137,7)" fg:x="1337" fg:w="6"/><text x="36.6805%" y="111.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.14%)</title><rect x="36.4578%" y="85" width="0.1362%" height="15" fill="rgb(230,79,13)" fg:x="1338" fg:w="5"/><text x="36.7078%" y="95.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.14%)</title><rect x="36.4578%" y="69" width="0.1362%" height="15" fill="rgb(247,105,23)" fg:x="1338" fg:w="5"/><text x="36.7078%" y="79.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.14%)</title><rect x="36.4578%" y="53" width="0.1362%" height="15" fill="rgb(223,179,41)" fg:x="1338" fg:w="5"/><text x="36.7078%" y="63.50"></text></g><g><title>nexus::parser::Parser::parse_f64 (1 samples, 0.03%)</title><rect x="36.5940%" y="117" width="0.0272%" height="15" fill="rgb(218,9,34)" fg:x="1343" fg:w="1"/><text x="36.8440%" y="127.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (1 samples, 0.03%)</title><rect x="36.5940%" y="101" width="0.0272%" height="15" fill="rgb(222,106,8)" fg:x="1343" fg:w="1"/><text x="36.8440%" y="111.50"></text></g><g><title>regex::regex::string::Regex::find_at (1 samples, 0.03%)</title><rect x="36.5940%" y="85" width="0.0272%" height="15" fill="rgb(211,220,0)" fg:x="1343" fg:w="1"/><text x="36.8440%" y="95.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="36.5940%" y="69" width="0.0272%" height="15" fill="rgb(229,52,16)" fg:x="1343" fg:w="1"/><text x="36.8440%" y="79.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.03%)</title><rect x="36.5940%" y="53" width="0.0272%" height="15" fill="rgb(212,155,18)" fg:x="1343" fg:w="1"/><text x="36.8440%" y="63.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="36.5940%" y="37" width="0.0272%" height="15" fill="rgb(242,21,14)" fg:x="1343" fg:w="1"/><text x="36.8440%" y="47.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (1 samples, 0.03%)</title><rect x="36.6213%" y="85" width="0.0272%" height="15" fill="rgb(222,19,48)" fg:x="1344" fg:w="1"/><text x="36.8713%" y="95.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="36.6213%" y="69" width="0.0272%" height="15" fill="rgb(232,45,27)" fg:x="1344" fg:w="1"/><text x="36.8713%" y="79.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1 samples, 0.03%)</title><rect x="36.6213%" y="53" width="0.0272%" height="15" fill="rgb(249,103,42)" fg:x="1344" fg:w="1"/><text x="36.8713%" y="63.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="36.6213%" y="37" width="0.0272%" height="15" fill="rgb(246,81,33)" fg:x="1344" fg:w="1"/><text x="36.8713%" y="47.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (3 samples, 0.08%)</title><rect x="36.5940%" y="133" width="0.0817%" height="15" fill="rgb(252,33,42)" fg:x="1343" fg:w="3"/><text x="36.8440%" y="143.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (2 samples, 0.05%)</title><rect x="36.6213%" y="117" width="0.0545%" height="15" fill="rgb(209,212,41)" fg:x="1344" fg:w="2"/><text x="36.8713%" y="127.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (2 samples, 0.05%)</title><rect x="36.6213%" y="101" width="0.0545%" height="15" fill="rgb(207,154,6)" fg:x="1344" fg:w="2"/><text x="36.8713%" y="111.50"></text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="36.6485%" y="85" width="0.0272%" height="15" fill="rgb(223,64,47)" fg:x="1345" fg:w="1"/><text x="36.8985%" y="95.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="36.6485%" y="69" width="0.0272%" height="15" fill="rgb(211,161,38)" fg:x="1345" fg:w="1"/><text x="36.8985%" y="79.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="36.7302%" y="101" width="0.0272%" height="15" fill="rgb(219,138,40)" fg:x="1348" fg:w="1"/><text x="36.9802%" y="111.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="36.7575%" y="101" width="0.0272%" height="15" fill="rgb(241,228,46)" fg:x="1349" fg:w="1"/><text x="37.0075%" y="111.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.11%)</title><rect x="36.7847%" y="69" width="0.1090%" height="15" fill="rgb(223,209,38)" fg:x="1350" fg:w="4"/><text x="37.0347%" y="79.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.11%)</title><rect x="36.7847%" y="53" width="0.1090%" height="15" fill="rgb(236,164,45)" fg:x="1350" fg:w="4"/><text x="37.0347%" y="63.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.14%)</title><rect x="36.7847%" y="85" width="0.1362%" height="15" fill="rgb(231,15,5)" fg:x="1350" fg:w="5"/><text x="37.0347%" y="95.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="36.8937%" y="69" width="0.0272%" height="15" fill="rgb(252,35,15)" fg:x="1354" fg:w="1"/><text x="37.1437%" y="79.50"></text></g><g><title>regex::regex::string::Regex::find_at (7 samples, 0.19%)</title><rect x="36.7847%" y="101" width="0.1907%" height="15" fill="rgb(248,181,18)" fg:x="1350" fg:w="7"/><text x="37.0347%" y="111.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.05%)</title><rect x="36.9210%" y="85" width="0.0545%" height="15" fill="rgb(233,39,42)" fg:x="1355" fg:w="2"/><text x="37.1710%" y="95.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (22 samples, 0.60%)</title><rect x="36.4033%" y="149" width="0.5995%" height="15" fill="rgb(238,110,33)" fg:x="1336" fg:w="22"/><text x="36.6533%" y="159.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (12 samples, 0.33%)</title><rect x="36.6757%" y="133" width="0.3270%" height="15" fill="rgb(233,195,10)" fg:x="1346" fg:w="12"/><text x="36.9257%" y="143.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (12 samples, 0.33%)</title><rect x="36.6757%" y="117" width="0.3270%" height="15" fill="rgb(254,105,3)" fg:x="1346" fg:w="12"/><text x="36.9257%" y="127.50"></text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="36.9755%" y="101" width="0.0272%" height="15" fill="rgb(221,225,9)" fg:x="1357" fg:w="1"/><text x="37.2255%" y="111.50"></text></g><g><title>free (1 samples, 0.03%)</title><rect x="37.0027%" y="133" width="0.0272%" height="15" fill="rgb(224,227,45)" fg:x="1358" fg:w="1"/><text x="37.2527%" y="143.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (2 samples, 0.05%)</title><rect x="37.0845%" y="117" width="0.0545%" height="15" fill="rgb(229,198,43)" fg:x="1361" fg:w="2"/><text x="37.3345%" y="127.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (2 samples, 0.05%)</title><rect x="37.0845%" y="101" width="0.0545%" height="15" fill="rgb(206,209,35)" fg:x="1361" fg:w="2"/><text x="37.3345%" y="111.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (2 samples, 0.05%)</title><rect x="37.0845%" y="85" width="0.0545%" height="15" fill="rgb(245,195,53)" fg:x="1361" fg:w="2"/><text x="37.3345%" y="95.50"></text></g><g><title>DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="37.1117%" y="69" width="0.0272%" height="15" fill="rgb(240,92,26)" fg:x="1362" fg:w="1"/><text x="37.3617%" y="79.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="37.1390%" y="117" width="0.0272%" height="15" fill="rgb(207,40,23)" fg:x="1363" fg:w="1"/><text x="37.3890%" y="127.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="37.1662%" y="117" width="0.0272%" height="15" fill="rgb(223,111,35)" fg:x="1364" fg:w="1"/><text x="37.4162%" y="127.50"></text></g><g><title>regex::regex::string::Regex::find_at (16 samples, 0.44%)</title><rect x="37.1935%" y="117" width="0.4360%" height="15" fill="rgb(229,147,28)" fg:x="1365" fg:w="16"/><text x="37.4435%" y="127.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (11 samples, 0.30%)</title><rect x="37.3297%" y="101" width="0.2997%" height="15" fill="rgb(211,29,28)" fg:x="1370" fg:w="11"/><text x="37.5797%" y="111.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (11 samples, 0.30%)</title><rect x="37.3297%" y="85" width="0.2997%" height="15" fill="rgb(228,72,33)" fg:x="1370" fg:w="11"/><text x="37.5797%" y="95.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (10 samples, 0.27%)</title><rect x="37.3569%" y="69" width="0.2725%" height="15" fill="rgb(205,214,31)" fg:x="1371" fg:w="10"/><text x="37.6069%" y="79.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="37.6294%" y="101" width="0.0272%" height="15" fill="rgb(224,111,15)" fg:x="1381" fg:w="1"/><text x="37.8794%" y="111.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (25 samples, 0.68%)</title><rect x="37.0300%" y="133" width="0.6812%" height="15" fill="rgb(253,21,26)" fg:x="1359" fg:w="25"/><text x="37.2800%" y="143.50"></text></g><g><title>regex_automata::util::captures::Captures::all (3 samples, 0.08%)</title><rect x="37.6294%" y="117" width="0.0817%" height="15" fill="rgb(245,139,43)" fg:x="1381" fg:w="3"/><text x="37.8794%" y="127.50"></text></g><g><title>nanov2_malloc (2 samples, 0.05%)</title><rect x="37.6567%" y="101" width="0.0545%" height="15" fill="rgb(252,170,7)" fg:x="1382" fg:w="2"/><text x="37.9067%" y="111.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (27 samples, 0.74%)</title><rect x="37.0027%" y="149" width="0.7357%" height="15" fill="rgb(231,118,14)" fg:x="1358" fg:w="27"/><text x="37.2527%" y="159.50"></text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="37.7112%" y="133" width="0.0272%" height="15" fill="rgb(238,83,0)" fg:x="1384" fg:w="1"/><text x="37.9612%" y="143.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="37.7384%" y="117" width="0.0272%" height="15" fill="rgb(221,39,39)" fg:x="1385" fg:w="1"/><text x="37.9884%" y="127.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (88 samples, 2.40%)</title><rect x="35.4496%" y="165" width="2.3978%" height="15" fill="rgb(222,119,46)" fg:x="1301" fg:w="88"/><text x="35.6996%" y="175.50">ne..</text></g><g><title>nexus::parser::Parser::parse_word (4 samples, 0.11%)</title><rect x="37.7384%" y="149" width="0.1090%" height="15" fill="rgb(222,165,49)" fg:x="1385" fg:w="4"/><text x="37.9884%" y="159.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (4 samples, 0.11%)</title><rect x="37.7384%" y="133" width="0.1090%" height="15" fill="rgb(219,113,52)" fg:x="1385" fg:w="4"/><text x="37.9884%" y="143.50"></text></g><g><title>regex::regex::string::Regex::find_at (3 samples, 0.08%)</title><rect x="37.7657%" y="117" width="0.0817%" height="15" fill="rgb(214,7,15)" fg:x="1386" fg:w="3"/><text x="38.0157%" y="127.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.05%)</title><rect x="37.7929%" y="101" width="0.0545%" height="15" fill="rgb(235,32,4)" fg:x="1387" fg:w="2"/><text x="38.0429%" y="111.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.05%)</title><rect x="37.7929%" y="85" width="0.0545%" height="15" fill="rgb(238,90,54)" fg:x="1387" fg:w="2"/><text x="38.0429%" y="95.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.05%)</title><rect x="37.7929%" y="69" width="0.0545%" height="15" fill="rgb(213,208,19)" fg:x="1387" fg:w="2"/><text x="38.0429%" y="79.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="37.8747%" y="149" width="0.0272%" height="15" fill="rgb(233,156,4)" fg:x="1390" fg:w="1"/><text x="38.1247%" y="159.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="38.1744%" y="133" width="0.0272%" height="15" fill="rgb(207,194,5)" fg:x="1401" fg:w="1"/><text x="38.4244%" y="143.50"></text></g><g><title>DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="38.2561%" y="85" width="0.0272%" height="15" fill="rgb(206,111,30)" fg:x="1404" fg:w="1"/><text x="38.5061%" y="95.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="38.2834%" y="85" width="0.0272%" height="15" fill="rgb(243,70,54)" fg:x="1405" fg:w="1"/><text x="38.5334%" y="95.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (5 samples, 0.14%)</title><rect x="38.2016%" y="133" width="0.1362%" height="15" fill="rgb(242,28,8)" fg:x="1402" fg:w="5"/><text x="38.4516%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (5 samples, 0.14%)</title><rect x="38.2016%" y="117" width="0.1362%" height="15" fill="rgb(219,106,18)" fg:x="1402" fg:w="5"/><text x="38.4516%" y="127.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (5 samples, 0.14%)</title><rect x="38.2016%" y="101" width="0.1362%" height="15" fill="rgb(244,222,10)" fg:x="1402" fg:w="5"/><text x="38.4516%" y="111.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="38.3106%" y="85" width="0.0272%" height="15" fill="rgb(236,179,52)" fg:x="1406" fg:w="1"/><text x="38.5606%" y="95.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="38.3379%" y="133" width="0.0272%" height="15" fill="rgb(213,23,39)" fg:x="1407" fg:w="1"/><text x="38.5879%" y="143.50"></text></g><g><title>_free (2 samples, 0.05%)</title><rect x="38.3651%" y="133" width="0.0545%" height="15" fill="rgb(238,48,10)" fg:x="1408" fg:w="2"/><text x="38.6151%" y="143.50"></text></g><g><title>_nanov2_free (4 samples, 0.11%)</title><rect x="38.4196%" y="133" width="0.1090%" height="15" fill="rgb(251,196,23)" fg:x="1410" fg:w="4"/><text x="38.6696%" y="143.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="38.5014%" y="117" width="0.0272%" height="15" fill="rgb(250,152,24)" fg:x="1413" fg:w="1"/><text x="38.7514%" y="127.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (39 samples, 1.06%)</title><rect x="38.7738%" y="101" width="1.0627%" height="15" fill="rgb(209,150,17)" fg:x="1423" fg:w="39"/><text x="39.0238%" y="111.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (33 samples, 0.90%)</title><rect x="38.9373%" y="85" width="0.8992%" height="15" fill="rgb(234,202,34)" fg:x="1429" fg:w="33"/><text x="39.1873%" y="95.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (41 samples, 1.12%)</title><rect x="38.7466%" y="117" width="1.1172%" height="15" fill="rgb(253,148,53)" fg:x="1422" fg:w="41"/><text x="38.9966%" y="127.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="39.8365%" y="101" width="0.0272%" height="15" fill="rgb(218,129,16)" fg:x="1462" fg:w="1"/><text x="40.0865%" y="111.50"></text></g><g><title>regex::regex::string::Regex::find_at (50 samples, 1.36%)</title><rect x="38.5286%" y="133" width="1.3624%" height="15" fill="rgb(216,85,19)" fg:x="1414" fg:w="50"/><text x="38.7786%" y="143.50"></text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="39.8638%" y="117" width="0.0272%" height="15" fill="rgb(235,228,7)" fg:x="1463" fg:w="1"/><text x="40.1138%" y="127.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (2 samples, 0.05%)</title><rect x="39.8910%" y="133" width="0.0545%" height="15" fill="rgb(245,175,0)" fg:x="1464" fg:w="2"/><text x="40.1410%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="39.9455%" y="133" width="0.0272%" height="15" fill="rgb(208,168,36)" fg:x="1466" fg:w="1"/><text x="40.1955%" y="143.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="40.0000%" y="117" width="0.0272%" height="15" fill="rgb(246,171,24)" fg:x="1468" fg:w="1"/><text x="40.2500%" y="127.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (79 samples, 2.15%)</title><rect x="37.9019%" y="149" width="2.1526%" height="15" fill="rgb(215,142,24)" fg:x="1391" fg:w="79"/><text x="38.1519%" y="159.50">n..</text></g><g><title>regex_automata::util::captures::Captures::all (3 samples, 0.08%)</title><rect x="39.9728%" y="133" width="0.0817%" height="15" fill="rgb(250,187,7)" fg:x="1467" fg:w="3"/><text x="40.2228%" y="143.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="40.0272%" y="117" width="0.0272%" height="15" fill="rgb(228,66,33)" fg:x="1469" fg:w="1"/><text x="40.2772%" y="127.50"></text></g><g><title>regex::regex::string::Regex::find_at (3 samples, 0.08%)</title><rect x="40.0545%" y="149" width="0.0817%" height="15" fill="rgb(234,215,21)" fg:x="1470" fg:w="3"/><text x="40.3045%" y="159.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (85 samples, 2.32%)</title><rect x="37.8474%" y="165" width="2.3161%" height="15" fill="rgb(222,191,20)" fg:x="1389" fg:w="85"/><text x="38.0974%" y="175.50">n..</text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="40.1362%" y="149" width="0.0272%" height="15" fill="rgb(245,79,54)" fg:x="1473" fg:w="1"/><text x="40.3862%" y="159.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="40.2452%" y="133" width="0.0272%" height="15" fill="rgb(240,10,37)" fg:x="1477" fg:w="1"/><text x="40.4952%" y="143.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (8 samples, 0.22%)</title><rect x="40.2997%" y="117" width="0.2180%" height="15" fill="rgb(214,192,32)" fg:x="1479" fg:w="8"/><text x="40.5497%" y="127.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.19%)</title><rect x="40.3270%" y="101" width="0.1907%" height="15" fill="rgb(209,36,54)" fg:x="1480" fg:w="7"/><text x="40.5770%" y="111.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.16%)</title><rect x="40.3542%" y="85" width="0.1635%" height="15" fill="rgb(220,10,11)" fg:x="1481" fg:w="6"/><text x="40.6042%" y="95.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.03%)</title><rect x="40.5177%" y="117" width="0.0272%" height="15" fill="rgb(221,106,17)" fg:x="1487" fg:w="1"/><text x="40.7677%" y="127.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (257 samples, 7.00%)</title><rect x="33.5695%" y="181" width="7.0027%" height="15" fill="rgb(251,142,44)" fg:x="1232" fg:w="257"/><text x="33.8195%" y="191.50">nexus::pa..</text></g><g><title>nexus::parser::Parser::parse_word (15 samples, 0.41%)</title><rect x="40.1635%" y="165" width="0.4087%" height="15" fill="rgb(238,13,15)" fg:x="1474" fg:w="15"/><text x="40.4135%" y="175.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (13 samples, 0.35%)</title><rect x="40.2180%" y="149" width="0.3542%" height="15" fill="rgb(208,107,27)" fg:x="1476" fg:w="13"/><text x="40.4680%" y="159.50"></text></g><g><title>regex::regex::string::Regex::find_at (11 samples, 0.30%)</title><rect x="40.2725%" y="133" width="0.2997%" height="15" fill="rgb(205,136,37)" fg:x="1478" fg:w="11"/><text x="40.5225%" y="143.50"></text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="40.5450%" y="117" width="0.0272%" height="15" fill="rgb(250,205,27)" fg:x="1488" fg:w="1"/><text x="40.7950%" y="127.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (1 samples, 0.03%)</title><rect x="40.6540%" y="165" width="0.0272%" height="15" fill="rgb(210,80,43)" fg:x="1492" fg:w="1"/><text x="40.9040%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="40.6812%" y="165" width="0.0272%" height="15" fill="rgb(247,160,36)" fg:x="1493" fg:w="1"/><text x="40.9312%" y="175.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="40.7084%" y="165" width="0.0272%" height="15" fill="rgb(234,13,49)" fg:x="1494" fg:w="1"/><text x="40.9584%" y="175.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="40.7357%" y="165" width="0.0272%" height="15" fill="rgb(234,122,0)" fg:x="1495" fg:w="1"/><text x="40.9857%" y="175.50"></text></g><g><title>free (1 samples, 0.03%)</title><rect x="40.7629%" y="165" width="0.0272%" height="15" fill="rgb(207,146,38)" fg:x="1496" fg:w="1"/><text x="41.0129%" y="175.50"></text></g><g><title>nanov2_malloc (5 samples, 0.14%)</title><rect x="40.7902%" y="165" width="0.1362%" height="15" fill="rgb(207,177,25)" fg:x="1497" fg:w="5"/><text x="41.0402%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.08%)</title><rect x="41.4714%" y="149" width="0.0817%" height="15" fill="rgb(211,178,42)" fg:x="1522" fg:w="3"/><text x="41.7214%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (1 samples, 0.03%)</title><rect x="41.6076%" y="133" width="0.0272%" height="15" fill="rgb(230,69,54)" fg:x="1527" fg:w="1"/><text x="41.8576%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1 samples, 0.03%)</title><rect x="41.6349%" y="133" width="0.0272%" height="15" fill="rgb(214,135,41)" fg:x="1528" fg:w="1"/><text x="41.8849%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (1 samples, 0.03%)</title><rect x="41.8256%" y="117" width="0.0272%" height="15" fill="rgb(237,67,25)" fg:x="1535" fg:w="1"/><text x="42.0756%" y="127.50"></text></g><g><title>DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="42.0708%" y="101" width="0.0272%" height="15" fill="rgb(222,189,50)" fg:x="1544" fg:w="1"/><text x="42.3208%" y="111.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (21 samples, 0.57%)</title><rect x="41.5531%" y="149" width="0.5722%" height="15" fill="rgb(245,148,34)" fg:x="1525" fg:w="21"/><text x="41.8031%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (17 samples, 0.46%)</title><rect x="41.6621%" y="133" width="0.4632%" height="15" fill="rgb(222,29,6)" fg:x="1529" fg:w="17"/><text x="41.9121%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (10 samples, 0.27%)</title><rect x="41.8529%" y="117" width="0.2725%" height="15" fill="rgb(221,189,43)" fg:x="1536" fg:w="10"/><text x="42.1029%" y="127.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="42.0981%" y="101" width="0.0272%" height="15" fill="rgb(207,36,27)" fg:x="1545" fg:w="1"/><text x="42.3481%" y="111.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="42.1253%" y="149" width="0.0272%" height="15" fill="rgb(217,90,24)" fg:x="1546" fg:w="1"/><text x="42.3753%" y="159.50"></text></g><g><title>_free (4 samples, 0.11%)</title><rect x="42.1526%" y="149" width="0.1090%" height="15" fill="rgb(224,66,35)" fg:x="1547" fg:w="4"/><text x="42.4026%" y="159.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (2 samples, 0.05%)</title><rect x="42.4251%" y="133" width="0.0545%" height="15" fill="rgb(221,13,50)" fg:x="1557" fg:w="2"/><text x="42.6751%" y="143.50"></text></g><g><title>_nanov2_free (9 samples, 0.25%)</title><rect x="42.2616%" y="149" width="0.2452%" height="15" fill="rgb(236,68,49)" fg:x="1551" fg:w="9"/><text x="42.5116%" y="159.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="42.4796%" y="133" width="0.0272%" height="15" fill="rgb(229,146,28)" fg:x="1559" fg:w="1"/><text x="42.7296%" y="143.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="42.5068%" y="149" width="0.0272%" height="15" fill="rgb(225,31,38)" fg:x="1560" fg:w="1"/><text x="42.7568%" y="159.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (70 samples, 1.91%)</title><rect x="43.2425%" y="117" width="1.9074%" height="15" fill="rgb(250,208,3)" fg:x="1587" fg:w="70"/><text x="43.4925%" y="127.50">r..</text></g><g><title>regex_automata::hybrid::search::find_fwd (57 samples, 1.55%)</title><rect x="43.5967%" y="101" width="1.5531%" height="15" fill="rgb(246,54,23)" fg:x="1600" fg:w="57"/><text x="43.8467%" y="111.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (76 samples, 2.07%)</title><rect x="43.1608%" y="133" width="2.0708%" height="15" fill="rgb(243,76,11)" fg:x="1584" fg:w="76"/><text x="43.4108%" y="143.50">&lt;..</text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.08%)</title><rect x="45.1499%" y="117" width="0.0817%" height="15" fill="rgb(245,21,50)" fg:x="1657" fg:w="3"/><text x="45.3999%" y="127.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.03%)</title><rect x="45.2316%" y="133" width="0.0272%" height="15" fill="rgb(228,9,43)" fg:x="1660" fg:w="1"/><text x="45.4816%" y="143.50"></text></g><g><title>regex::regex::string::Regex::find_at (102 samples, 2.78%)</title><rect x="42.5341%" y="149" width="2.7793%" height="15" fill="rgb(208,100,47)" fg:x="1561" fg:w="102"/><text x="42.7841%" y="159.50">re..</text></g><g><title>tlv_get_addr (2 samples, 0.05%)</title><rect x="45.2589%" y="133" width="0.0545%" height="15" fill="rgb(232,26,8)" fg:x="1661" fg:w="2"/><text x="45.5089%" y="143.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="45.3678%" y="133" width="0.0545%" height="15" fill="rgb(216,166,38)" fg:x="1665" fg:w="2"/><text x="45.6178%" y="143.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="45.4223%" y="133" width="0.0545%" height="15" fill="rgb(251,202,51)" fg:x="1667" fg:w="2"/><text x="45.6723%" y="143.50"></text></g><g><title>regex_automata::util::captures::Captures::all (12 samples, 0.33%)</title><rect x="45.3134%" y="149" width="0.3270%" height="15" fill="rgb(254,216,34)" fg:x="1663" fg:w="12"/><text x="45.5634%" y="159.50"></text></g><g><title>nanov2_malloc (6 samples, 0.16%)</title><rect x="45.4768%" y="133" width="0.1635%" height="15" fill="rgb(251,32,27)" fg:x="1669" fg:w="6"/><text x="45.7268%" y="143.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (174 samples, 4.74%)</title><rect x="40.9264%" y="165" width="4.7411%" height="15" fill="rgb(208,127,28)" fg:x="1502" fg:w="174"/><text x="41.1764%" y="175.50">nexus:..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="45.6403%" y="149" width="0.0272%" height="15" fill="rgb(224,137,22)" fg:x="1675" fg:w="1"/><text x="45.8903%" y="159.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (192 samples, 5.23%)</title><rect x="40.5722%" y="181" width="5.2316%" height="15" fill="rgb(254,70,32)" fg:x="1489" fg:w="192"/><text x="40.8222%" y="191.50">nexus:..</text></g><g><title>regex::regex::string::Regex::find_at (5 samples, 0.14%)</title><rect x="45.6676%" y="165" width="0.1362%" height="15" fill="rgb(229,75,37)" fg:x="1676" fg:w="5"/><text x="45.9176%" y="175.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (600 samples, 16.35%)</title><rect x="29.7548%" y="197" width="16.3488%" height="15" fill="rgb(252,64,23)" fg:x="1092" fg:w="600"/><text x="30.0048%" y="207.50">nexus::parser::Parser::pa..</text></g><g><title>nexus::parser::Parser::parse_word (11 samples, 0.30%)</title><rect x="45.8038%" y="181" width="0.2997%" height="15" fill="rgb(232,162,48)" fg:x="1681" fg:w="11"/><text x="46.0538%" y="191.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (10 samples, 0.27%)</title><rect x="45.8311%" y="165" width="0.2725%" height="15" fill="rgb(246,160,12)" fg:x="1682" fg:w="10"/><text x="46.0811%" y="175.50"></text></g><g><title>regex::regex::string::Regex::find_at (10 samples, 0.27%)</title><rect x="45.8311%" y="149" width="0.2725%" height="15" fill="rgb(247,166,0)" fg:x="1682" fg:w="10"/><text x="46.0811%" y="159.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.14%)</title><rect x="45.9673%" y="133" width="0.1362%" height="15" fill="rgb(249,219,21)" fg:x="1687" fg:w="5"/><text x="46.2173%" y="143.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.14%)</title><rect x="45.9673%" y="117" width="0.1362%" height="15" fill="rgb(205,209,3)" fg:x="1687" fg:w="5"/><text x="46.2173%" y="127.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.11%)</title><rect x="45.9946%" y="101" width="0.1090%" height="15" fill="rgb(243,44,1)" fg:x="1688" fg:w="4"/><text x="46.2446%" y="111.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (5 samples, 0.14%)</title><rect x="46.2125%" y="181" width="0.1362%" height="15" fill="rgb(206,159,16)" fg:x="1696" fg:w="5"/><text x="46.4625%" y="191.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="46.3488%" y="181" width="0.0272%" height="15" fill="rgb(244,77,30)" fg:x="1701" fg:w="1"/><text x="46.5988%" y="191.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="46.3760%" y="181" width="0.0272%" height="15" fill="rgb(218,69,12)" fg:x="1702" fg:w="1"/><text x="46.6260%" y="191.50"></text></g><g><title>nanov2_malloc (2 samples, 0.05%)</title><rect x="46.4033%" y="181" width="0.0545%" height="15" fill="rgb(212,87,7)" fg:x="1703" fg:w="2"/><text x="46.6533%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.16%)</title><rect x="46.9210%" y="165" width="0.1635%" height="15" fill="rgb(245,114,25)" fg:x="1722" fg:w="6"/><text x="47.1710%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1 samples, 0.03%)</title><rect x="47.1390%" y="149" width="0.0272%" height="15" fill="rgb(210,61,42)" fg:x="1730" fg:w="1"/><text x="47.3890%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (5 samples, 0.14%)</title><rect x="47.2207%" y="133" width="0.1362%" height="15" fill="rgb(211,52,33)" fg:x="1733" fg:w="5"/><text x="47.4707%" y="143.50"></text></g><g><title>DYLD-STUB$$bzero (2 samples, 0.05%)</title><rect x="47.9564%" y="117" width="0.0545%" height="15" fill="rgb(234,58,33)" fg:x="1760" fg:w="2"/><text x="48.2064%" y="127.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="48.0109%" y="117" width="0.0272%" height="15" fill="rgb(220,115,36)" fg:x="1762" fg:w="1"/><text x="48.2609%" y="127.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (42 samples, 1.14%)</title><rect x="47.0845%" y="165" width="1.1444%" height="15" fill="rgb(243,153,54)" fg:x="1728" fg:w="42"/><text x="47.3345%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (39 samples, 1.06%)</title><rect x="47.1662%" y="149" width="1.0627%" height="15" fill="rgb(251,47,18)" fg:x="1731" fg:w="39"/><text x="47.4162%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (32 samples, 0.87%)</title><rect x="47.3569%" y="133" width="0.8719%" height="15" fill="rgb(242,102,42)" fg:x="1738" fg:w="32"/><text x="47.6069%" y="143.50"></text></g><g><title>_platform_memset (7 samples, 0.19%)</title><rect x="48.0381%" y="117" width="0.1907%" height="15" fill="rgb(234,31,38)" fg:x="1763" fg:w="7"/><text x="48.2881%" y="127.50"></text></g><g><title>_free (3 samples, 0.08%)</title><rect x="48.2289%" y="165" width="0.0817%" height="15" fill="rgb(221,117,51)" fg:x="1770" fg:w="3"/><text x="48.4789%" y="175.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="48.3106%" y="165" width="0.0272%" height="15" fill="rgb(212,20,18)" fg:x="1773" fg:w="1"/><text x="48.5606%" y="175.50"></text></g><g><title>_nanov2_free (32 samples, 0.87%)</title><rect x="48.3379%" y="165" width="0.8719%" height="15" fill="rgb(245,133,36)" fg:x="1774" fg:w="32"/><text x="48.5879%" y="175.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="49.1826%" y="149" width="0.0272%" height="15" fill="rgb(212,6,19)" fg:x="1805" fg:w="1"/><text x="49.4326%" y="159.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="49.2098%" y="165" width="0.0272%" height="15" fill="rgb(218,1,36)" fg:x="1806" fg:w="1"/><text x="49.4598%" y="175.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="49.2371%" y="165" width="0.0272%" height="15" fill="rgb(246,84,54)" fg:x="1807" fg:w="1"/><text x="49.4871%" y="175.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (115 samples, 3.13%)</title><rect x="50.0545%" y="133" width="3.1335%" height="15" fill="rgb(242,110,6)" fg:x="1837" fg:w="115"/><text x="50.3045%" y="143.50">reg..</text></g><g><title>regex_automata::hybrid::search::find_fwd (97 samples, 2.64%)</title><rect x="50.5450%" y="117" width="2.6431%" height="15" fill="rgb(214,47,5)" fg:x="1855" fg:w="97"/><text x="50.7950%" y="127.50">re..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (130 samples, 3.54%)</title><rect x="49.8365%" y="149" width="3.5422%" height="15" fill="rgb(218,159,25)" fg:x="1829" fg:w="130"/><text x="50.0865%" y="159.50">&lt;reg..</text></g><g><title>regex_automata::hybrid::search::find_fwd (7 samples, 0.19%)</title><rect x="53.1880%" y="133" width="0.1907%" height="15" fill="rgb(215,211,28)" fg:x="1952" fg:w="7"/><text x="53.4380%" y="143.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.11%)</title><rect x="53.3787%" y="149" width="0.1090%" height="15" fill="rgb(238,59,32)" fg:x="1959" fg:w="4"/><text x="53.6287%" y="159.50"></text></g><g><title>regex::regex::string::Regex::find_at (157 samples, 4.28%)</title><rect x="49.2643%" y="165" width="4.2779%" height="15" fill="rgb(226,82,3)" fg:x="1808" fg:w="157"/><text x="49.5143%" y="175.50">regex..</text></g><g><title>tlv_get_addr (2 samples, 0.05%)</title><rect x="53.4877%" y="149" width="0.0545%" height="15" fill="rgb(240,164,32)" fg:x="1963" fg:w="2"/><text x="53.7377%" y="159.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (4 samples, 0.11%)</title><rect x="53.5422%" y="165" width="0.1090%" height="15" fill="rgb(232,46,7)" fg:x="1965" fg:w="4"/><text x="53.7922%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::group_info (1 samples, 0.03%)</title><rect x="53.6240%" y="149" width="0.0272%" height="15" fill="rgb(229,129,53)" fg:x="1968" fg:w="1"/><text x="53.8740%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="53.6785%" y="149" width="0.0272%" height="15" fill="rgb(234,188,29)" fg:x="1970" fg:w="1"/><text x="53.9285%" y="159.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="53.7057%" y="149" width="0.0545%" height="15" fill="rgb(246,141,4)" fg:x="1971" fg:w="2"/><text x="53.9557%" y="159.50"></text></g><g><title>_platform_memset (4 samples, 0.11%)</title><rect x="53.7602%" y="149" width="0.1090%" height="15" fill="rgb(229,23,39)" fg:x="1973" fg:w="4"/><text x="54.0102%" y="159.50"></text></g><g><title>regex_automata::util::captures::Captures::all (16 samples, 0.44%)</title><rect x="53.6512%" y="165" width="0.4360%" height="15" fill="rgb(206,12,3)" fg:x="1969" fg:w="16"/><text x="53.9012%" y="175.50"></text></g><g><title>nanov2_malloc (8 samples, 0.22%)</title><rect x="53.8692%" y="149" width="0.2180%" height="15" fill="rgb(252,226,20)" fg:x="1977" fg:w="8"/><text x="54.1192%" y="159.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (281 samples, 7.66%)</title><rect x="46.4578%" y="181" width="7.6567%" height="15" fill="rgb(216,123,35)" fg:x="1705" fg:w="281"/><text x="46.7078%" y="191.50">nexus::lex..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="54.0872%" y="165" width="0.0272%" height="15" fill="rgb(212,68,40)" fg:x="1985" fg:w="1"/><text x="54.3372%" y="175.50"></text></g><g><title>regex::regex::string::Regex::find_at (4 samples, 0.11%)</title><rect x="54.1144%" y="181" width="0.1090%" height="15" fill="rgb(254,125,32)" fg:x="1986" fg:w="4"/><text x="54.3644%" y="191.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (300 samples, 8.17%)</title><rect x="46.1035%" y="197" width="8.1744%" height="15" fill="rgb(253,97,22)" fg:x="1692" fg:w="300"/><text x="46.3535%" y="207.50">nexus::pars..</text></g><g><title>regex_automata::util::captures::Captures::all (2 samples, 0.05%)</title><rect x="54.2234%" y="181" width="0.0545%" height="15" fill="rgb(241,101,14)" fg:x="1990" fg:w="2"/><text x="54.4734%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.05%)</title><rect x="54.4142%" y="165" width="0.0545%" height="15" fill="rgb(238,103,29)" fg:x="1997" fg:w="2"/><text x="54.6642%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (13 samples, 0.35%)</title><rect x="54.5777%" y="149" width="0.3542%" height="15" fill="rgb(233,195,47)" fg:x="2003" fg:w="13"/><text x="54.8277%" y="159.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (13 samples, 0.35%)</title><rect x="54.5777%" y="133" width="0.3542%" height="15" fill="rgb(246,218,30)" fg:x="2003" fg:w="13"/><text x="54.8277%" y="143.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (11 samples, 0.30%)</title><rect x="54.6322%" y="117" width="0.2997%" height="15" fill="rgb(219,145,47)" fg:x="2005" fg:w="11"/><text x="54.8822%" y="127.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (23 samples, 0.63%)</title><rect x="54.3324%" y="181" width="0.6267%" height="15" fill="rgb(243,12,26)" fg:x="1994" fg:w="23"/><text x="54.5824%" y="191.50"></text></g><g><title>regex::regex::string::Regex::find_at (18 samples, 0.49%)</title><rect x="54.4687%" y="165" width="0.4905%" height="15" fill="rgb(214,87,16)" fg:x="1999" fg:w="18"/><text x="54.7187%" y="175.50"></text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="54.9319%" y="149" width="0.0272%" height="15" fill="rgb(208,99,42)" fg:x="2016" fg:w="1"/><text x="55.1819%" y="159.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (1,123 samples, 30.60%)</title><rect x="24.3869%" y="213" width="30.5995%" height="15" fill="rgb(253,99,2)" fg:x="895" fg:w="1123"/><text x="24.6369%" y="223.50">nexus::parser::Parser::parse_nexus_subtree</text></g><g><title>nexus::parser::Parser::parse_word (26 samples, 0.71%)</title><rect x="54.2779%" y="197" width="0.7084%" height="15" fill="rgb(220,168,23)" fg:x="1992" fg:w="26"/><text x="54.5279%" y="207.50"></text></g><g><title>regex::regex::string::Regex::find_at (1 samples, 0.03%)</title><rect x="54.9591%" y="181" width="0.0272%" height="15" fill="rgb(242,38,24)" fg:x="2017" fg:w="1"/><text x="55.2091%" y="191.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="55.0409%" y="197" width="0.0272%" height="15" fill="rgb(225,182,9)" fg:x="2020" fg:w="1"/><text x="55.2909%" y="207.50"></text></g><g><title>_nanov2_free (4 samples, 0.11%)</title><rect x="55.0681%" y="197" width="0.1090%" height="15" fill="rgb(243,178,37)" fg:x="2021" fg:w="4"/><text x="55.3181%" y="207.50"></text></g><g><title>nanov2_malloc (2 samples, 0.05%)</title><rect x="55.1771%" y="197" width="0.0545%" height="15" fill="rgb(232,139,19)" fg:x="2025" fg:w="2"/><text x="55.4271%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.05%)</title><rect x="55.8856%" y="181" width="0.0545%" height="15" fill="rgb(225,201,24)" fg:x="2051" fg:w="2"/><text x="56.1356%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (2 samples, 0.05%)</title><rect x="56.0218%" y="165" width="0.0545%" height="15" fill="rgb(221,47,46)" fg:x="2056" fg:w="2"/><text x="56.2718%" y="175.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="56.2670%" y="149" width="0.0272%" height="15" fill="rgb(249,23,13)" fg:x="2065" fg:w="1"/><text x="56.5170%" y="159.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="56.2943%" y="149" width="0.0545%" height="15" fill="rgb(219,9,5)" fg:x="2066" fg:w="2"/><text x="56.5443%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (1 samples, 0.03%)</title><rect x="56.3488%" y="149" width="0.0272%" height="15" fill="rgb(254,171,16)" fg:x="2068" fg:w="1"/><text x="56.5988%" y="159.50"></text></g><g><title>DYLD-STUB$$bzero (7 samples, 0.19%)</title><rect x="56.9482%" y="133" width="0.1907%" height="15" fill="rgb(230,171,20)" fg:x="2090" fg:w="7"/><text x="57.1982%" y="143.50"></text></g><g><title>__bzero (2 samples, 0.05%)</title><rect x="57.1390%" y="133" width="0.0545%" height="15" fill="rgb(210,71,41)" fg:x="2097" fg:w="2"/><text x="57.3890%" y="143.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (54 samples, 1.47%)</title><rect x="55.9401%" y="181" width="1.4714%" height="15" fill="rgb(206,173,20)" fg:x="2053" fg:w="54"/><text x="56.1901%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (49 samples, 1.34%)</title><rect x="56.0763%" y="165" width="1.3351%" height="15" fill="rgb(233,88,34)" fg:x="2058" fg:w="49"/><text x="56.3263%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (38 samples, 1.04%)</title><rect x="56.3760%" y="149" width="1.0354%" height="15" fill="rgb(223,209,46)" fg:x="2069" fg:w="38"/><text x="56.6260%" y="159.50"></text></g><g><title>_platform_memset (8 samples, 0.22%)</title><rect x="57.1935%" y="133" width="0.2180%" height="15" fill="rgb(250,43,18)" fg:x="2099" fg:w="8"/><text x="57.4435%" y="143.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.08%)</title><rect x="57.4114%" y="181" width="0.0817%" height="15" fill="rgb(208,13,10)" fg:x="2107" fg:w="3"/><text x="57.6614%" y="191.50"></text></g><g><title>_free (10 samples, 0.27%)</title><rect x="57.4932%" y="181" width="0.2725%" height="15" fill="rgb(212,200,36)" fg:x="2110" fg:w="10"/><text x="57.7432%" y="191.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="57.7657%" y="181" width="0.0545%" height="15" fill="rgb(225,90,30)" fg:x="2120" fg:w="2"/><text x="58.0157%" y="191.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="58.7193%" y="165" width="0.0272%" height="15" fill="rgb(236,182,39)" fg:x="2155" fg:w="1"/><text x="58.9693%" y="175.50"></text></g><g><title>_nanov2_free (35 samples, 0.95%)</title><rect x="57.8202%" y="181" width="0.9537%" height="15" fill="rgb(212,144,35)" fg:x="2122" fg:w="35"/><text x="58.0702%" y="191.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="58.7466%" y="165" width="0.0272%" height="15" fill="rgb(228,63,44)" fg:x="2156" fg:w="1"/><text x="58.9966%" y="175.50"></text></g><g><title>_platform_memset (3 samples, 0.08%)</title><rect x="58.7738%" y="181" width="0.0817%" height="15" fill="rgb(228,109,6)" fg:x="2157" fg:w="3"/><text x="59.0238%" y="191.50"></text></g><g><title>free (1 samples, 0.03%)</title><rect x="58.8556%" y="181" width="0.0272%" height="15" fill="rgb(238,117,24)" fg:x="2160" fg:w="1"/><text x="59.1056%" y="191.50"></text></g><g><title>nanov2_malloc (2 samples, 0.05%)</title><rect x="58.8828%" y="181" width="0.0545%" height="15" fill="rgb(242,26,26)" fg:x="2161" fg:w="2"/><text x="59.1328%" y="191.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (148 samples, 4.03%)</title><rect x="60.2180%" y="149" width="4.0327%" height="15" fill="rgb(221,92,48)" fg:x="2210" fg:w="148"/><text x="60.4680%" y="159.50">rege..</text></g><g><title>regex_automata::hybrid::search::find_fwd (126 samples, 3.43%)</title><rect x="60.8174%" y="133" width="3.4332%" height="15" fill="rgb(209,209,32)" fg:x="2232" fg:w="126"/><text x="61.0674%" y="143.50">reg..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (166 samples, 4.52%)</title><rect x="59.8910%" y="165" width="4.5232%" height="15" fill="rgb(221,70,22)" fg:x="2198" fg:w="166"/><text x="60.1410%" y="175.50">&lt;rege..</text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.16%)</title><rect x="64.2507%" y="149" width="0.1635%" height="15" fill="rgb(248,145,5)" fg:x="2358" fg:w="6"/><text x="64.5007%" y="159.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.11%)</title><rect x="64.4142%" y="165" width="0.1090%" height="15" fill="rgb(226,116,26)" fg:x="2364" fg:w="4"/><text x="64.6642%" y="175.50"></text></g><g><title>regex::regex::string::Regex::find_at (210 samples, 5.72%)</title><rect x="58.9373%" y="181" width="5.7221%" height="15" fill="rgb(244,5,17)" fg:x="2163" fg:w="210"/><text x="59.1873%" y="191.50">regex::..</text></g><g><title>tlv_get_addr (5 samples, 0.14%)</title><rect x="64.5232%" y="165" width="0.1362%" height="15" fill="rgb(252,159,33)" fg:x="2368" fg:w="5"/><text x="64.7732%" y="175.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (6 samples, 0.16%)</title><rect x="64.6594%" y="181" width="0.1635%" height="15" fill="rgb(206,71,0)" fg:x="2373" fg:w="6"/><text x="64.9094%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::group_info (4 samples, 0.11%)</title><rect x="64.7139%" y="165" width="0.1090%" height="15" fill="rgb(233,118,54)" fg:x="2375" fg:w="4"/><text x="64.9639%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="64.8229%" y="181" width="0.0272%" height="15" fill="rgb(234,83,48)" fg:x="2379" fg:w="1"/><text x="65.0729%" y="191.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="65.0136%" y="165" width="0.0545%" height="15" fill="rgb(228,3,54)" fg:x="2386" fg:w="2"/><text x="65.2636%" y="175.50"></text></g><g><title>_malloc_zone_malloc (9 samples, 0.25%)</title><rect x="65.0681%" y="165" width="0.2452%" height="15" fill="rgb(226,155,13)" fg:x="2388" fg:w="9"/><text x="65.3181%" y="175.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="65.3134%" y="165" width="0.0545%" height="15" fill="rgb(241,28,37)" fg:x="2397" fg:w="2"/><text x="65.5634%" y="175.50"></text></g><g><title>regex_automata::util::captures::Captures::all (26 samples, 0.71%)</title><rect x="64.8501%" y="181" width="0.7084%" height="15" fill="rgb(233,93,10)" fg:x="2380" fg:w="26"/><text x="65.1001%" y="191.50"></text></g><g><title>nanov2_malloc (7 samples, 0.19%)</title><rect x="65.3678%" y="165" width="0.1907%" height="15" fill="rgb(225,113,19)" fg:x="2399" fg:w="7"/><text x="65.6178%" y="175.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (380 samples, 10.35%)</title><rect x="55.2316%" y="197" width="10.3542%" height="15" fill="rgb(241,2,18)" fg:x="2027" fg:w="380"/><text x="55.4816%" y="207.50">nexus::lexer::L..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="65.5586%" y="181" width="0.0272%" height="15" fill="rgb(228,207,21)" fg:x="2406" fg:w="1"/><text x="65.8086%" y="191.50"></text></g><g><title>regex::regex::string::Regex::find_at (1 samples, 0.03%)</title><rect x="65.5858%" y="197" width="0.0272%" height="15" fill="rgb(213,211,35)" fg:x="2407" fg:w="1"/><text x="65.8358%" y="207.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (392 samples, 10.68%)</title><rect x="54.9864%" y="213" width="10.6812%" height="15" fill="rgb(209,83,10)" fg:x="2018" fg:w="392"/><text x="55.2364%" y="223.50">nexus::parser::P..</text></g><g><title>regex_automata::util::captures::Captures::all (2 samples, 0.05%)</title><rect x="65.6131%" y="197" width="0.0545%" height="15" fill="rgb(209,164,1)" fg:x="2408" fg:w="2"/><text x="65.8631%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="65.7493%" y="181" width="0.0272%" height="15" fill="rgb(213,184,43)" fg:x="2413" fg:w="1"/><text x="65.9993%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (18 samples, 0.49%)</title><rect x="65.9128%" y="165" width="0.4905%" height="15" fill="rgb(231,61,34)" fg:x="2419" fg:w="18"/><text x="66.1628%" y="175.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (16 samples, 0.44%)</title><rect x="65.9673%" y="149" width="0.4360%" height="15" fill="rgb(235,75,3)" fg:x="2421" fg:w="16"/><text x="66.2173%" y="159.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (13 samples, 0.35%)</title><rect x="66.0490%" y="133" width="0.3542%" height="15" fill="rgb(220,106,47)" fg:x="2424" fg:w="13"/><text x="66.2990%" y="143.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.03%)</title><rect x="66.4033%" y="165" width="0.0272%" height="15" fill="rgb(210,196,33)" fg:x="2437" fg:w="1"/><text x="66.6533%" y="175.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (1,776 samples, 48.39%)</title><rect x="18.0654%" y="229" width="48.3924%" height="15" fill="rgb(229,154,42)" fg:x="663" fg:w="1776"/><text x="18.3154%" y="239.50">nexus::parser::Parser::parse_nexus_subtree</text></g><g><title>nexus::parser::Parser::parse_word (29 samples, 0.79%)</title><rect x="65.6676%" y="213" width="0.7902%" height="15" fill="rgb(228,114,26)" fg:x="2410" fg:w="29"/><text x="65.9176%" y="223.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (28 samples, 0.76%)</title><rect x="65.6948%" y="197" width="0.7629%" height="15" fill="rgb(208,144,1)" fg:x="2411" fg:w="28"/><text x="65.9448%" y="207.50"></text></g><g><title>regex::regex::string::Regex::find_at (25 samples, 0.68%)</title><rect x="65.7766%" y="181" width="0.6812%" height="15" fill="rgb(239,112,37)" fg:x="2414" fg:w="25"/><text x="66.0266%" y="191.50"></text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="66.4305%" y="165" width="0.0272%" height="15" fill="rgb(210,96,50)" fg:x="2438" fg:w="1"/><text x="66.6805%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (1 samples, 0.03%)</title><rect x="66.4578%" y="213" width="0.0272%" height="15" fill="rgb(222,178,2)" fg:x="2439" fg:w="1"/><text x="66.7078%" y="223.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="66.4850%" y="213" width="0.0272%" height="15" fill="rgb(226,74,18)" fg:x="2440" fg:w="1"/><text x="66.7350%" y="223.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="66.5123%" y="213" width="0.0545%" height="15" fill="rgb(225,67,54)" fg:x="2441" fg:w="2"/><text x="66.7623%" y="223.50"></text></g><g><title>_nanov2_free (2 samples, 0.05%)</title><rect x="66.5668%" y="213" width="0.0545%" height="15" fill="rgb(251,92,32)" fg:x="2443" fg:w="2"/><text x="66.8168%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="67.4932%" y="197" width="0.0272%" height="15" fill="rgb(228,149,22)" fg:x="2477" fg:w="1"/><text x="67.7432%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (1 samples, 0.03%)</title><rect x="67.6022%" y="181" width="0.0272%" height="15" fill="rgb(243,54,13)" fg:x="2481" fg:w="1"/><text x="67.8522%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (5 samples, 0.14%)</title><rect x="67.6294%" y="181" width="0.1362%" height="15" fill="rgb(243,180,28)" fg:x="2482" fg:w="5"/><text x="67.8794%" y="191.50"></text></g><g><title>_platform_memset (3 samples, 0.08%)</title><rect x="67.9292%" y="165" width="0.0817%" height="15" fill="rgb(208,167,24)" fg:x="2493" fg:w="3"/><text x="68.1792%" y="175.50"></text></g><g><title>DYLD-STUB$$bzero (5 samples, 0.14%)</title><rect x="68.5286%" y="149" width="0.1362%" height="15" fill="rgb(245,73,45)" fg:x="2515" fg:w="5"/><text x="68.7786%" y="159.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="68.6649%" y="149" width="0.0272%" height="15" fill="rgb(237,203,48)" fg:x="2520" fg:w="1"/><text x="68.9149%" y="159.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (48 samples, 1.31%)</title><rect x="67.5204%" y="197" width="1.3079%" height="15" fill="rgb(211,197,16)" fg:x="2478" fg:w="48"/><text x="67.7704%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (39 samples, 1.06%)</title><rect x="67.7657%" y="181" width="1.0627%" height="15" fill="rgb(243,99,51)" fg:x="2487" fg:w="39"/><text x="68.0157%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (30 samples, 0.82%)</title><rect x="68.0109%" y="165" width="0.8174%" height="15" fill="rgb(215,123,29)" fg:x="2496" fg:w="30"/><text x="68.2609%" y="175.50"></text></g><g><title>_platform_memset (5 samples, 0.14%)</title><rect x="68.6921%" y="149" width="0.1362%" height="15" fill="rgb(239,186,37)" fg:x="2521" fg:w="5"/><text x="68.9421%" y="159.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.08%)</title><rect x="68.8283%" y="197" width="0.0817%" height="15" fill="rgb(252,136,39)" fg:x="2526" fg:w="3"/><text x="69.0783%" y="207.50"></text></g><g><title>_free (9 samples, 0.25%)</title><rect x="68.9101%" y="197" width="0.2452%" height="15" fill="rgb(223,213,32)" fg:x="2529" fg:w="9"/><text x="69.1601%" y="207.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="69.1553%" y="197" width="0.0545%" height="15" fill="rgb(233,115,5)" fg:x="2538" fg:w="2"/><text x="69.4053%" y="207.50"></text></g><g><title>_nanov2_free (43 samples, 1.17%)</title><rect x="69.2098%" y="197" width="1.1717%" height="15" fill="rgb(207,226,44)" fg:x="2540" fg:w="43"/><text x="69.4598%" y="207.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="70.3542%" y="181" width="0.0272%" height="15" fill="rgb(208,126,0)" fg:x="2582" fg:w="1"/><text x="70.6042%" y="191.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="70.3815%" y="197" width="0.0272%" height="15" fill="rgb(244,66,21)" fg:x="2583" fg:w="1"/><text x="70.6315%" y="207.50"></text></g><g><title>free (1 samples, 0.03%)</title><rect x="70.4087%" y="197" width="0.0272%" height="15" fill="rgb(222,97,12)" fg:x="2584" fg:w="1"/><text x="70.6587%" y="207.50"></text></g><g><title>nanov2_malloc (2 samples, 0.05%)</title><rect x="70.4360%" y="197" width="0.0545%" height="15" fill="rgb(219,213,19)" fg:x="2585" fg:w="2"/><text x="70.6860%" y="207.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (122 samples, 3.32%)</title><rect x="71.5804%" y="165" width="3.3243%" height="15" fill="rgb(252,169,30)" fg:x="2627" fg:w="122"/><text x="71.8304%" y="175.50">reg..</text></g><g><title>regex_automata::hybrid::search::find_fwd (103 samples, 2.81%)</title><rect x="72.0981%" y="149" width="2.8065%" height="15" fill="rgb(206,32,51)" fg:x="2646" fg:w="103"/><text x="72.3481%" y="159.50">re..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (138 samples, 3.76%)</title><rect x="71.3079%" y="181" width="3.7602%" height="15" fill="rgb(250,172,42)" fg:x="2617" fg:w="138"/><text x="71.5579%" y="191.50">&lt;reg..</text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.16%)</title><rect x="74.9046%" y="165" width="0.1635%" height="15" fill="rgb(209,34,43)" fg:x="2749" fg:w="6"/><text x="75.1546%" y="175.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.11%)</title><rect x="75.0681%" y="181" width="0.1090%" height="15" fill="rgb(223,11,35)" fg:x="2755" fg:w="4"/><text x="75.3181%" y="191.50"></text></g><g><title>regex::regex::string::Regex::find_at (173 samples, 4.71%)</title><rect x="70.4905%" y="197" width="4.7139%" height="15" fill="rgb(251,219,26)" fg:x="2587" fg:w="173"/><text x="70.7405%" y="207.50">regex..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="75.1771%" y="181" width="0.0272%" height="15" fill="rgb(231,119,3)" fg:x="2759" fg:w="1"/><text x="75.4271%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (8 samples, 0.22%)</title><rect x="75.2044%" y="197" width="0.2180%" height="15" fill="rgb(216,97,11)" fg:x="2760" fg:w="8"/><text x="75.4544%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::group_info (2 samples, 0.05%)</title><rect x="75.3678%" y="181" width="0.0545%" height="15" fill="rgb(223,59,9)" fg:x="2766" fg:w="2"/><text x="75.6178%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="75.4223%" y="197" width="0.0272%" height="15" fill="rgb(233,93,31)" fg:x="2768" fg:w="1"/><text x="75.6723%" y="207.50"></text></g><g><title>DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="75.5586%" y="181" width="0.0272%" height="15" fill="rgb(239,81,33)" fg:x="2773" fg:w="1"/><text x="75.8086%" y="191.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="75.5858%" y="181" width="0.0272%" height="15" fill="rgb(213,120,34)" fg:x="2774" fg:w="1"/><text x="75.8358%" y="191.50"></text></g><g><title>__rdl_alloc (3 samples, 0.08%)</title><rect x="75.6131%" y="181" width="0.0817%" height="15" fill="rgb(243,49,53)" fg:x="2775" fg:w="3"/><text x="75.8631%" y="191.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.16%)</title><rect x="75.6948%" y="181" width="0.1635%" height="15" fill="rgb(247,216,33)" fg:x="2778" fg:w="6"/><text x="75.9448%" y="191.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="75.8583%" y="181" width="0.0272%" height="15" fill="rgb(226,26,14)" fg:x="2784" fg:w="1"/><text x="76.1083%" y="191.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (344 samples, 9.37%)</title><rect x="66.6213%" y="213" width="9.3733%" height="15" fill="rgb(215,49,53)" fg:x="2445" fg:w="344"/><text x="66.8713%" y="223.50">nexus::lexer:..</text></g><g><title>regex_automata::util::captures::Captures::all (20 samples, 0.54%)</title><rect x="75.4496%" y="197" width="0.5450%" height="15" fill="rgb(245,162,40)" fg:x="2769" fg:w="20"/><text x="75.6996%" y="207.50"></text></g><g><title>nanov2_malloc (4 samples, 0.11%)</title><rect x="75.8856%" y="181" width="0.1090%" height="15" fill="rgb(229,68,17)" fg:x="2785" fg:w="4"/><text x="76.1356%" y="191.50"></text></g><g><title>regex::regex::string::Regex::find_at (10 samples, 0.27%)</title><rect x="75.9946%" y="213" width="0.2725%" height="15" fill="rgb(213,182,10)" fg:x="2789" fg:w="10"/><text x="76.2446%" y="223.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (362 samples, 9.86%)</title><rect x="66.4578%" y="229" width="9.8638%" height="15" fill="rgb(245,125,30)" fg:x="2439" fg:w="362"/><text x="66.7078%" y="239.50">nexus::parser:..</text></g><g><title>regex_automata::util::captures::Captures::all (2 samples, 0.05%)</title><rect x="76.2670%" y="213" width="0.0545%" height="15" fill="rgb(232,202,2)" fg:x="2799" fg:w="2"/><text x="76.5170%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (9 samples, 0.25%)</title><rect x="76.3760%" y="181" width="0.2452%" height="15" fill="rgb(237,140,51)" fg:x="2803" fg:w="9"/><text x="76.6260%" y="191.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (9 samples, 0.25%)</title><rect x="76.3760%" y="165" width="0.2452%" height="15" fill="rgb(236,157,25)" fg:x="2803" fg:w="9"/><text x="76.6260%" y="175.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (8 samples, 0.22%)</title><rect x="76.4033%" y="149" width="0.2180%" height="15" fill="rgb(219,209,0)" fg:x="2804" fg:w="8"/><text x="76.6533%" y="159.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (11 samples, 0.30%)</title><rect x="76.3488%" y="213" width="0.2997%" height="15" fill="rgb(240,116,54)" fg:x="2802" fg:w="11"/><text x="76.5988%" y="223.50"></text></g><g><title>regex::regex::string::Regex::find_at (10 samples, 0.27%)</title><rect x="76.3760%" y="197" width="0.2725%" height="15" fill="rgb(216,10,36)" fg:x="2803" fg:w="10"/><text x="76.6260%" y="207.50"></text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="76.6213%" y="181" width="0.0272%" height="15" fill="rgb(222,72,44)" fg:x="2812" fg:w="1"/><text x="76.8713%" y="191.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (2,361 samples, 64.33%)</title><rect x="12.3706%" y="245" width="64.3324%" height="15" fill="rgb(232,159,9)" fg:x="454" fg:w="2361"/><text x="12.6206%" y="255.50">nexus::parser::Parser::parse_nexus_subtree</text></g><g><title>nexus::parser::Parser::parse_word (14 samples, 0.38%)</title><rect x="76.3215%" y="229" width="0.3815%" height="15" fill="rgb(210,39,32)" fg:x="2801" fg:w="14"/><text x="76.5715%" y="239.50"></text></g><g><title>regex::regex::string::Regex::find_at (2 samples, 0.05%)</title><rect x="76.6485%" y="213" width="0.0545%" height="15" fill="rgb(216,194,45)" fg:x="2813" fg:w="2"/><text x="76.8985%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (2 samples, 0.05%)</title><rect x="76.7302%" y="229" width="0.0545%" height="15" fill="rgb(218,18,35)" fg:x="2816" fg:w="2"/><text x="76.9802%" y="239.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="76.7847%" y="229" width="0.0272%" height="15" fill="rgb(207,83,51)" fg:x="2818" fg:w="1"/><text x="77.0347%" y="239.50"></text></g><g><title>_nanov2_free (2 samples, 0.05%)</title><rect x="76.8120%" y="229" width="0.0545%" height="15" fill="rgb(225,63,43)" fg:x="2819" fg:w="2"/><text x="77.0620%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.08%)</title><rect x="77.4387%" y="213" width="0.0817%" height="15" fill="rgb(207,57,36)" fg:x="2842" fg:w="3"/><text x="77.6887%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (4 samples, 0.11%)</title><rect x="77.5477%" y="197" width="0.1090%" height="15" fill="rgb(216,99,33)" fg:x="2846" fg:w="4"/><text x="77.7977%" y="207.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="77.6839%" y="181" width="0.0272%" height="15" fill="rgb(225,42,16)" fg:x="2851" fg:w="1"/><text x="77.9339%" y="191.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="77.7112%" y="181" width="0.0545%" height="15" fill="rgb(220,201,45)" fg:x="2852" fg:w="2"/><text x="77.9612%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (4 samples, 0.11%)</title><rect x="77.7657%" y="181" width="0.1090%" height="15" fill="rgb(225,33,4)" fg:x="2854" fg:w="4"/><text x="78.0157%" y="191.50"></text></g><g><title>DYLD-STUB$$bzero (2 samples, 0.05%)</title><rect x="78.5286%" y="165" width="0.0545%" height="15" fill="rgb(224,33,50)" fg:x="2882" fg:w="2"/><text x="78.7786%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (47 samples, 1.28%)</title><rect x="77.5204%" y="213" width="1.2807%" height="15" fill="rgb(246,198,51)" fg:x="2845" fg:w="47"/><text x="77.7704%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (42 samples, 1.14%)</title><rect x="77.6567%" y="197" width="1.1444%" height="15" fill="rgb(205,22,4)" fg:x="2850" fg:w="42"/><text x="77.9067%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (34 samples, 0.93%)</title><rect x="77.8747%" y="181" width="0.9264%" height="15" fill="rgb(206,3,8)" fg:x="2858" fg:w="34"/><text x="78.1247%" y="191.50"></text></g><g><title>_platform_memset (8 samples, 0.22%)</title><rect x="78.5831%" y="165" width="0.2180%" height="15" fill="rgb(251,23,15)" fg:x="2884" fg:w="8"/><text x="78.8331%" y="175.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="78.8011%" y="213" width="0.0272%" height="15" fill="rgb(252,88,28)" fg:x="2892" fg:w="1"/><text x="79.0511%" y="223.50"></text></g><g><title>_free (8 samples, 0.22%)</title><rect x="78.8283%" y="213" width="0.2180%" height="15" fill="rgb(212,127,14)" fg:x="2893" fg:w="8"/><text x="79.0783%" y="223.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="79.0463%" y="213" width="0.0272%" height="15" fill="rgb(247,145,37)" fg:x="2901" fg:w="1"/><text x="79.2963%" y="223.50"></text></g><g><title>_nanov2_free (22 samples, 0.60%)</title><rect x="79.0736%" y="213" width="0.5995%" height="15" fill="rgb(209,117,53)" fg:x="2902" fg:w="22"/><text x="79.3236%" y="223.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="79.6185%" y="197" width="0.0545%" height="15" fill="rgb(212,90,42)" fg:x="2922" fg:w="2"/><text x="79.8685%" y="207.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="79.6730%" y="213" width="0.0272%" height="15" fill="rgb(218,164,37)" fg:x="2924" fg:w="1"/><text x="79.9230%" y="223.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="79.7003%" y="213" width="0.0272%" height="15" fill="rgb(246,65,34)" fg:x="2925" fg:w="1"/><text x="79.9503%" y="223.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (126 samples, 3.43%)</title><rect x="80.6267%" y="181" width="3.4332%" height="15" fill="rgb(231,100,33)" fg:x="2959" fg:w="126"/><text x="80.8767%" y="191.50">reg..</text></g><g><title>regex_automata::hybrid::search::find_fwd (103 samples, 2.81%)</title><rect x="81.2534%" y="165" width="2.8065%" height="15" fill="rgb(228,126,14)" fg:x="2982" fg:w="103"/><text x="81.5034%" y="175.50">re..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (141 samples, 3.84%)</title><rect x="80.3270%" y="197" width="3.8420%" height="15" fill="rgb(215,173,21)" fg:x="2948" fg:w="141"/><text x="80.5770%" y="207.50">&lt;reg..</text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.11%)</title><rect x="84.0599%" y="181" width="0.1090%" height="15" fill="rgb(210,6,40)" fg:x="3085" fg:w="4"/><text x="84.3099%" y="191.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.11%)</title><rect x="84.1689%" y="197" width="0.1090%" height="15" fill="rgb(212,48,18)" fg:x="3089" fg:w="4"/><text x="84.4189%" y="207.50"></text></g><g><title>regex::regex::string::Regex::find_at (171 samples, 4.66%)</title><rect x="79.7275%" y="213" width="4.6594%" height="15" fill="rgb(230,214,11)" fg:x="2926" fg:w="171"/><text x="79.9775%" y="223.50">regex..</text></g><g><title>tlv_get_addr (4 samples, 0.11%)</title><rect x="84.2779%" y="197" width="0.1090%" height="15" fill="rgb(254,105,39)" fg:x="3093" fg:w="4"/><text x="84.5279%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (3 samples, 0.08%)</title><rect x="84.3869%" y="213" width="0.0817%" height="15" fill="rgb(245,158,5)" fg:x="3097" fg:w="3"/><text x="84.6369%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="84.4687%" y="213" width="0.0272%" height="15" fill="rgb(249,208,11)" fg:x="3100" fg:w="1"/><text x="84.7187%" y="223.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="84.5232%" y="197" width="0.0272%" height="15" fill="rgb(210,39,28)" fg:x="3102" fg:w="1"/><text x="84.7732%" y="207.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="84.5504%" y="197" width="0.0545%" height="15" fill="rgb(211,56,53)" fg:x="3103" fg:w="2"/><text x="84.8004%" y="207.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.11%)</title><rect x="84.6049%" y="197" width="0.1090%" height="15" fill="rgb(226,201,30)" fg:x="3105" fg:w="4"/><text x="84.8549%" y="207.50"></text></g><g><title>_platform_memset (6 samples, 0.16%)</title><rect x="84.7139%" y="197" width="0.1635%" height="15" fill="rgb(239,101,34)" fg:x="3109" fg:w="6"/><text x="84.9639%" y="207.50"></text></g><g><title>regex_automata::util::captures::Captures::all (20 samples, 0.54%)</title><rect x="84.4959%" y="213" width="0.5450%" height="15" fill="rgb(226,209,5)" fg:x="3101" fg:w="20"/><text x="84.7459%" y="223.50"></text></g><g><title>nanov2_malloc (6 samples, 0.16%)</title><rect x="84.8774%" y="197" width="0.1635%" height="15" fill="rgb(250,105,47)" fg:x="3115" fg:w="6"/><text x="85.1274%" y="207.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (302 samples, 8.23%)</title><rect x="76.8665%" y="229" width="8.2289%" height="15" fill="rgb(230,72,3)" fg:x="2821" fg:w="302"/><text x="77.1165%" y="239.50">nexus::lexe..</text></g><g><title>tlv_get_addr (2 samples, 0.05%)</title><rect x="85.0409%" y="213" width="0.0545%" height="15" fill="rgb(232,218,39)" fg:x="3121" fg:w="2"/><text x="85.2909%" y="223.50"></text></g><g><title>regex::regex::string::Regex::find_at (1 samples, 0.03%)</title><rect x="85.0954%" y="229" width="0.0272%" height="15" fill="rgb(248,166,6)" fg:x="3123" fg:w="1"/><text x="85.3454%" y="239.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (311 samples, 8.47%)</title><rect x="76.7030%" y="245" width="8.4741%" height="15" fill="rgb(247,89,20)" fg:x="2815" fg:w="311"/><text x="76.9530%" y="255.50">nexus::parse..</text></g><g><title>regex_automata::util::captures::Captures::all (2 samples, 0.05%)</title><rect x="85.1226%" y="229" width="0.0545%" height="15" fill="rgb(248,130,54)" fg:x="3124" fg:w="2"/><text x="85.3726%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="85.1771%" y="213" width="0.0272%" height="15" fill="rgb(234,196,4)" fg:x="3126" fg:w="1"/><text x="85.4271%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="85.3406%" y="197" width="0.0272%" height="15" fill="rgb(250,143,31)" fg:x="3132" fg:w="1"/><text x="85.5906%" y="207.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="85.3406%" y="181" width="0.0272%" height="15" fill="rgb(211,110,34)" fg:x="3132" fg:w="1"/><text x="85.5906%" y="191.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (8 samples, 0.22%)</title><rect x="85.1771%" y="229" width="0.2180%" height="15" fill="rgb(215,124,48)" fg:x="3126" fg:w="8"/><text x="85.4271%" y="239.50"></text></g><g><title>regex::regex::string::Regex::find_at (7 samples, 0.19%)</title><rect x="85.2044%" y="213" width="0.1907%" height="15" fill="rgb(216,46,13)" fg:x="3127" fg:w="7"/><text x="85.4544%" y="223.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.03%)</title><rect x="85.3678%" y="197" width="0.0272%" height="15" fill="rgb(205,184,25)" fg:x="3133" fg:w="1"/><text x="85.6178%" y="207.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (2,889 samples, 78.72%)</title><rect x="6.7302%" y="261" width="78.7193%" height="15" fill="rgb(228,1,10)" fg:x="247" fg:w="2889"/><text x="6.9802%" y="271.50">nexus::parser::Parser::parse_nexus_subtree</text></g><g><title>nexus::parser::Parser::parse_word (10 samples, 0.27%)</title><rect x="85.1771%" y="245" width="0.2725%" height="15" fill="rgb(213,116,27)" fg:x="3126" fg:w="10"/><text x="85.4271%" y="255.50"></text></g><g><title>regex::regex::string::Regex::find_at (2 samples, 0.05%)</title><rect x="85.3951%" y="229" width="0.0545%" height="15" fill="rgb(241,95,50)" fg:x="3134" fg:w="2"/><text x="85.6451%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (1 samples, 0.03%)</title><rect x="85.4496%" y="245" width="0.0272%" height="15" fill="rgb(238,48,32)" fg:x="3136" fg:w="1"/><text x="85.6996%" y="255.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="85.4768%" y="245" width="0.0272%" height="15" fill="rgb(235,113,49)" fg:x="3137" fg:w="1"/><text x="85.7268%" y="255.50"></text></g><g><title>_nanov2_free (2 samples, 0.05%)</title><rect x="85.5041%" y="245" width="0.0545%" height="15" fill="rgb(205,127,43)" fg:x="3138" fg:w="2"/><text x="85.7541%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.11%)</title><rect x="85.8583%" y="229" width="0.1090%" height="15" fill="rgb(250,162,2)" fg:x="3151" fg:w="4"/><text x="86.1083%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (2 samples, 0.05%)</title><rect x="85.9946%" y="213" width="0.0545%" height="15" fill="rgb(220,13,41)" fg:x="3156" fg:w="2"/><text x="86.2446%" y="223.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="86.1308%" y="197" width="0.0545%" height="15" fill="rgb(249,221,25)" fg:x="3161" fg:w="2"/><text x="86.3808%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (1 samples, 0.03%)</title><rect x="86.1853%" y="197" width="0.0272%" height="15" fill="rgb(215,208,19)" fg:x="3163" fg:w="1"/><text x="86.4353%" y="207.50"></text></g><g><title>DYLD-STUB$$bzero (6 samples, 0.16%)</title><rect x="86.6757%" y="181" width="0.1635%" height="15" fill="rgb(236,175,2)" fg:x="3181" fg:w="6"/><text x="86.9257%" y="191.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="86.8392%" y="181" width="0.0272%" height="15" fill="rgb(241,52,2)" fg:x="3187" fg:w="1"/><text x="87.0892%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (36 samples, 0.98%)</title><rect x="85.9673%" y="229" width="0.9809%" height="15" fill="rgb(248,140,14)" fg:x="3155" fg:w="36"/><text x="86.2173%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (33 samples, 0.90%)</title><rect x="86.0490%" y="213" width="0.8992%" height="15" fill="rgb(253,22,42)" fg:x="3158" fg:w="33"/><text x="86.2990%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (27 samples, 0.74%)</title><rect x="86.2125%" y="197" width="0.7357%" height="15" fill="rgb(234,61,47)" fg:x="3164" fg:w="27"/><text x="86.4625%" y="207.50"></text></g><g><title>_platform_memset (3 samples, 0.08%)</title><rect x="86.8665%" y="181" width="0.0817%" height="15" fill="rgb(208,226,15)" fg:x="3188" fg:w="3"/><text x="87.1165%" y="191.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="86.9482%" y="229" width="0.0272%" height="15" fill="rgb(217,221,4)" fg:x="3191" fg:w="1"/><text x="87.1982%" y="239.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.05%)</title><rect x="86.9755%" y="229" width="0.0545%" height="15" fill="rgb(212,174,34)" fg:x="3192" fg:w="2"/><text x="87.2255%" y="239.50"></text></g><g><title>_free (3 samples, 0.08%)</title><rect x="87.0300%" y="229" width="0.0817%" height="15" fill="rgb(253,83,4)" fg:x="3194" fg:w="3"/><text x="87.2800%" y="239.50"></text></g><g><title>_nanov2_free (29 samples, 0.79%)</title><rect x="87.1117%" y="229" width="0.7902%" height="15" fill="rgb(250,195,49)" fg:x="3197" fg:w="29"/><text x="87.3617%" y="239.50"></text></g><g><title>_platform_memset (4 samples, 0.11%)</title><rect x="87.7929%" y="213" width="0.1090%" height="15" fill="rgb(241,192,25)" fg:x="3222" fg:w="4"/><text x="88.0429%" y="223.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="87.9019%" y="229" width="0.0272%" height="15" fill="rgb(208,124,10)" fg:x="3226" fg:w="1"/><text x="88.1519%" y="239.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="87.9292%" y="229" width="0.0272%" height="15" fill="rgb(222,33,0)" fg:x="3227" fg:w="1"/><text x="88.1792%" y="239.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (74 samples, 2.02%)</title><rect x="88.7193%" y="197" width="2.0163%" height="15" fill="rgb(234,209,28)" fg:x="3256" fg:w="74"/><text x="88.9693%" y="207.50">r..</text></g><g><title>regex_automata::hybrid::search::find_fwd (60 samples, 1.63%)</title><rect x="89.1008%" y="181" width="1.6349%" height="15" fill="rgb(224,11,23)" fg:x="3270" fg:w="60"/><text x="89.3508%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (86 samples, 2.34%)</title><rect x="88.5559%" y="213" width="2.3433%" height="15" fill="rgb(232,99,1)" fg:x="3250" fg:w="86"/><text x="88.8059%" y="223.50">&lt;..</text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.16%)</title><rect x="90.7357%" y="197" width="0.1635%" height="15" fill="rgb(237,95,45)" fg:x="3330" fg:w="6"/><text x="90.9857%" y="207.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.11%)</title><rect x="90.8992%" y="213" width="0.1090%" height="15" fill="rgb(208,109,11)" fg:x="3336" fg:w="4"/><text x="91.1492%" y="223.50"></text></g><g><title>regex::regex::string::Regex::find_at (113 samples, 3.08%)</title><rect x="87.9564%" y="229" width="3.0790%" height="15" fill="rgb(216,190,48)" fg:x="3228" fg:w="113"/><text x="88.2064%" y="239.50">reg..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="91.0082%" y="213" width="0.0272%" height="15" fill="rgb(251,171,36)" fg:x="3340" fg:w="1"/><text x="91.2582%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (6 samples, 0.16%)</title><rect x="91.0354%" y="229" width="0.1635%" height="15" fill="rgb(230,62,22)" fg:x="3341" fg:w="6"/><text x="91.2854%" y="239.50"></text></g><g><title>DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="91.2534%" y="213" width="0.0272%" height="15" fill="rgb(225,114,35)" fg:x="3349" fg:w="1"/><text x="91.5034%" y="223.50"></text></g><g><title>__rdl_alloc (4 samples, 0.11%)</title><rect x="91.2807%" y="213" width="0.1090%" height="15" fill="rgb(215,118,42)" fg:x="3350" fg:w="4"/><text x="91.5307%" y="223.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="91.3896%" y="213" width="0.0272%" height="15" fill="rgb(243,119,21)" fg:x="3354" fg:w="1"/><text x="91.6396%" y="223.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="91.4169%" y="213" width="0.0272%" height="15" fill="rgb(252,177,53)" fg:x="3355" fg:w="1"/><text x="91.6669%" y="223.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (223 samples, 6.08%)</title><rect x="85.5586%" y="245" width="6.0763%" height="15" fill="rgb(237,209,29)" fg:x="3140" fg:w="223"/><text x="85.8086%" y="255.50">nexus::l..</text></g><g><title>regex_automata::util::captures::Captures::all (16 samples, 0.44%)</title><rect x="91.1989%" y="229" width="0.4360%" height="15" fill="rgb(212,65,23)" fg:x="3347" fg:w="16"/><text x="91.4489%" y="239.50"></text></g><g><title>nanov2_malloc (7 samples, 0.19%)</title><rect x="91.4441%" y="213" width="0.1907%" height="15" fill="rgb(230,222,46)" fg:x="3356" fg:w="7"/><text x="91.6941%" y="223.50"></text></g><g><title>regex::regex::string::Regex::find_at (2 samples, 0.05%)</title><rect x="91.6349%" y="245" width="0.0545%" height="15" fill="rgb(215,135,32)" fg:x="3363" fg:w="2"/><text x="91.8849%" y="255.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (232 samples, 6.32%)</title><rect x="85.4496%" y="261" width="6.3215%" height="15" fill="rgb(246,101,22)" fg:x="3136" fg:w="232"/><text x="85.6996%" y="271.50">nexus::p..</text></g><g><title>regex_automata::util::captures::Captures::all (3 samples, 0.08%)</title><rect x="91.6894%" y="245" width="0.0817%" height="15" fill="rgb(206,107,13)" fg:x="3365" fg:w="3"/><text x="91.9394%" y="255.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (3,244 samples, 88.39%)</title><rect x="3.4877%" y="277" width="88.3924%" height="15" fill="rgb(250,100,44)" fg:x="128" fg:w="3244"/><text x="3.7377%" y="287.50">nexus::parser::Parser::parse_nexus_subtree</text></g><g><title>nexus::parser::Parser::parse_word (4 samples, 0.11%)</title><rect x="91.7711%" y="261" width="0.1090%" height="15" fill="rgb(231,147,38)" fg:x="3368" fg:w="4"/><text x="92.0211%" y="271.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (4 samples, 0.11%)</title><rect x="91.7711%" y="245" width="0.1090%" height="15" fill="rgb(229,8,40)" fg:x="3368" fg:w="4"/><text x="92.0211%" y="255.50"></text></g><g><title>regex::regex::string::Regex::find_at (4 samples, 0.11%)</title><rect x="91.7711%" y="229" width="0.1090%" height="15" fill="rgb(221,135,30)" fg:x="3368" fg:w="4"/><text x="92.0211%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.05%)</title><rect x="91.8256%" y="213" width="0.0545%" height="15" fill="rgb(249,193,18)" fg:x="3370" fg:w="2"/><text x="92.0756%" y="223.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.05%)</title><rect x="91.8256%" y="197" width="0.0545%" height="15" fill="rgb(209,133,39)" fg:x="3370" fg:w="2"/><text x="92.0756%" y="207.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.05%)</title><rect x="91.8256%" y="181" width="0.0545%" height="15" fill="rgb(232,100,14)" fg:x="3370" fg:w="2"/><text x="92.0756%" y="191.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="91.9074%" y="261" width="0.0272%" height="15" fill="rgb(224,185,1)" fg:x="3373" fg:w="1"/><text x="92.1574%" y="271.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="91.9346%" y="261" width="0.0272%" height="15" fill="rgb(223,139,8)" fg:x="3374" fg:w="1"/><text x="92.1846%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.16%)</title><rect x="92.2616%" y="245" width="0.1635%" height="15" fill="rgb(232,213,38)" fg:x="3386" fg:w="6"/><text x="92.5116%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (1 samples, 0.03%)</title><rect x="92.4796%" y="229" width="0.0272%" height="15" fill="rgb(207,94,22)" fg:x="3394" fg:w="1"/><text x="92.7296%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (3 samples, 0.08%)</title><rect x="92.5068%" y="229" width="0.0817%" height="15" fill="rgb(219,183,54)" fg:x="3395" fg:w="3"/><text x="92.7568%" y="239.50"></text></g><g><title>DYLD-STUB$$bzero (3 samples, 0.08%)</title><rect x="92.9428%" y="197" width="0.0817%" height="15" fill="rgb(216,185,54)" fg:x="3411" fg:w="3"/><text x="93.1928%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (24 samples, 0.65%)</title><rect x="92.4251%" y="245" width="0.6540%" height="15" fill="rgb(254,217,39)" fg:x="3392" fg:w="24"/><text x="92.6751%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (18 samples, 0.49%)</title><rect x="92.5886%" y="229" width="0.4905%" height="15" fill="rgb(240,178,23)" fg:x="3398" fg:w="18"/><text x="92.8386%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (15 samples, 0.41%)</title><rect x="92.6703%" y="213" width="0.4087%" height="15" fill="rgb(218,11,47)" fg:x="3401" fg:w="15"/><text x="92.9203%" y="223.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="93.0245%" y="197" width="0.0545%" height="15" fill="rgb(218,51,51)" fg:x="3414" fg:w="2"/><text x="93.2745%" y="207.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="93.0790%" y="245" width="0.0272%" height="15" fill="rgb(238,126,27)" fg:x="3416" fg:w="1"/><text x="93.3290%" y="255.50"></text></g><g><title>_free (4 samples, 0.11%)</title><rect x="93.1063%" y="245" width="0.1090%" height="15" fill="rgb(249,202,22)" fg:x="3417" fg:w="4"/><text x="93.3563%" y="255.50"></text></g><g><title>_nanov2_free (14 samples, 0.38%)</title><rect x="93.2153%" y="245" width="0.3815%" height="15" fill="rgb(254,195,49)" fg:x="3421" fg:w="14"/><text x="93.4653%" y="255.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="93.5422%" y="229" width="0.0545%" height="15" fill="rgb(208,123,14)" fg:x="3433" fg:w="2"/><text x="93.7922%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (52 samples, 1.42%)</title><rect x="93.9782%" y="229" width="1.4169%" height="15" fill="rgb(224,200,8)" fg:x="3449" fg:w="52"/><text x="94.2282%" y="239.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (49 samples, 1.34%)</title><rect x="94.0599%" y="213" width="1.3351%" height="15" fill="rgb(217,61,36)" fg:x="3452" fg:w="49"/><text x="94.3099%" y="223.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (42 samples, 1.14%)</title><rect x="94.2507%" y="197" width="1.1444%" height="15" fill="rgb(206,35,45)" fg:x="3459" fg:w="42"/><text x="94.5007%" y="207.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.08%)</title><rect x="95.3951%" y="229" width="0.0817%" height="15" fill="rgb(217,65,33)" fg:x="3501" fg:w="3"/><text x="95.6451%" y="239.50"></text></g><g><title>regex::regex::string::Regex::find_at (71 samples, 1.93%)</title><rect x="93.5967%" y="245" width="1.9346%" height="15" fill="rgb(222,158,48)" fg:x="3435" fg:w="71"/><text x="93.8467%" y="255.50">r..</text></g><g><title>tlv_get_addr (2 samples, 0.05%)</title><rect x="95.4768%" y="229" width="0.0545%" height="15" fill="rgb(254,2,54)" fg:x="3504" fg:w="2"/><text x="95.7268%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (2 samples, 0.05%)</title><rect x="95.5313%" y="245" width="0.0545%" height="15" fill="rgb(250,143,38)" fg:x="3506" fg:w="2"/><text x="95.7813%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="95.5858%" y="245" width="0.0272%" height="15" fill="rgb(248,25,0)" fg:x="3508" fg:w="1"/><text x="95.8358%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="95.6676%" y="229" width="0.0272%" height="15" fill="rgb(206,152,27)" fg:x="3511" fg:w="1"/><text x="95.9176%" y="239.50"></text></g><g><title>_malloc_zone_malloc (5 samples, 0.14%)</title><rect x="95.6948%" y="229" width="0.1362%" height="15" fill="rgb(240,77,30)" fg:x="3512" fg:w="5"/><text x="95.9448%" y="239.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="95.8311%" y="229" width="0.0272%" height="15" fill="rgb(231,5,3)" fg:x="3517" fg:w="1"/><text x="96.0811%" y="239.50"></text></g><g><title>regex_automata::util::captures::Captures::all (10 samples, 0.27%)</title><rect x="95.6131%" y="245" width="0.2725%" height="15" fill="rgb(207,226,32)" fg:x="3509" fg:w="10"/><text x="95.8631%" y="255.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="95.8583%" y="229" width="0.0272%" height="15" fill="rgb(222,207,47)" fg:x="3518" fg:w="1"/><text x="96.1083%" y="239.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (145 samples, 3.95%)</title><rect x="91.9619%" y="261" width="3.9510%" height="15" fill="rgb(229,115,45)" fg:x="3375" fg:w="145"/><text x="92.2119%" y="271.50">nexu..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="95.8856%" y="245" width="0.0272%" height="15" fill="rgb(224,191,6)" fg:x="3519" fg:w="1"/><text x="96.1356%" y="255.50"></text></g><g><title>regex::regex::string::Regex::find_at (1 samples, 0.03%)</title><rect x="95.9128%" y="261" width="0.0272%" height="15" fill="rgb(230,227,24)" fg:x="3520" fg:w="1"/><text x="96.1628%" y="271.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (150 samples, 4.09%)</title><rect x="91.8801%" y="277" width="4.0872%" height="15" fill="rgb(228,80,19)" fg:x="3372" fg:w="150"/><text x="92.1301%" y="287.50">nexu..</text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="95.9401%" y="261" width="0.0272%" height="15" fill="rgb(247,229,0)" fg:x="3521" fg:w="1"/><text x="96.1901%" y="271.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (3,443 samples, 93.81%)</title><rect x="2.2071%" y="293" width="93.8147%" height="15" fill="rgb(237,194,15)" fg:x="81" fg:w="3443"/><text x="2.4571%" y="303.50">nexus::parser::Parser::parse_nexus_subtree</text></g><g><title>nexus::parser::Parser::parse_word (2 samples, 0.05%)</title><rect x="95.9673%" y="277" width="0.0545%" height="15" fill="rgb(219,203,20)" fg:x="3522" fg:w="2"/><text x="96.2173%" y="287.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (2 samples, 0.05%)</title><rect x="95.9673%" y="261" width="0.0545%" height="15" fill="rgb(234,128,8)" fg:x="3522" fg:w="2"/><text x="96.2173%" y="271.50"></text></g><g><title>regex::regex::string::Regex::find_at (2 samples, 0.05%)</title><rect x="95.9673%" y="245" width="0.0545%" height="15" fill="rgb(248,202,8)" fg:x="3522" fg:w="2"/><text x="96.2173%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="95.9946%" y="229" width="0.0272%" height="15" fill="rgb(206,104,37)" fg:x="3523" fg:w="1"/><text x="96.2446%" y="239.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.03%)</title><rect x="95.9946%" y="213" width="0.0272%" height="15" fill="rgb(223,8,27)" fg:x="3523" fg:w="1"/><text x="96.2446%" y="223.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="95.9946%" y="197" width="0.0272%" height="15" fill="rgb(216,217,28)" fg:x="3523" fg:w="1"/><text x="96.2446%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="96.1580%" y="261" width="0.0272%" height="15" fill="rgb(249,199,1)" fg:x="3529" fg:w="1"/><text x="96.4080%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (1 samples, 0.03%)</title><rect x="96.1853%" y="245" width="0.0272%" height="15" fill="rgb(240,85,17)" fg:x="3530" fg:w="1"/><text x="96.4353%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1 samples, 0.03%)</title><rect x="96.2125%" y="245" width="0.0272%" height="15" fill="rgb(206,108,45)" fg:x="3531" fg:w="1"/><text x="96.4625%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (6 samples, 0.16%)</title><rect x="96.1853%" y="261" width="0.1635%" height="15" fill="rgb(245,210,41)" fg:x="3530" fg:w="6"/><text x="96.4353%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (4 samples, 0.11%)</title><rect x="96.2398%" y="245" width="0.1090%" height="15" fill="rgb(206,13,37)" fg:x="3532" fg:w="4"/><text x="96.4898%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (2 samples, 0.05%)</title><rect x="96.2943%" y="229" width="0.0545%" height="15" fill="rgb(250,61,18)" fg:x="3534" fg:w="2"/><text x="96.5443%" y="239.50"></text></g><g><title>_platform_memset (1 samples, 0.03%)</title><rect x="96.3215%" y="213" width="0.0272%" height="15" fill="rgb(235,172,48)" fg:x="3535" fg:w="1"/><text x="96.5715%" y="223.50"></text></g><g><title>_free (2 samples, 0.05%)</title><rect x="96.3488%" y="261" width="0.0545%" height="15" fill="rgb(249,201,17)" fg:x="3536" fg:w="2"/><text x="96.5988%" y="271.50"></text></g><g><title>_nanov2_free (7 samples, 0.19%)</title><rect x="96.4033%" y="261" width="0.1907%" height="15" fill="rgb(219,208,6)" fg:x="3538" fg:w="7"/><text x="96.6533%" y="271.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="96.5668%" y="245" width="0.0272%" height="15" fill="rgb(248,31,23)" fg:x="3544" fg:w="1"/><text x="96.8168%" y="255.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="96.5940%" y="261" width="0.0545%" height="15" fill="rgb(245,15,42)" fg:x="3545" fg:w="2"/><text x="96.8440%" y="271.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (20 samples, 0.54%)</title><rect x="97.0845%" y="229" width="0.5450%" height="15" fill="rgb(222,217,39)" fg:x="3563" fg:w="20"/><text x="97.3345%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (16 samples, 0.44%)</title><rect x="97.1935%" y="213" width="0.4360%" height="15" fill="rgb(210,219,27)" fg:x="3567" fg:w="16"/><text x="97.4435%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (27 samples, 0.74%)</title><rect x="96.9210%" y="245" width="0.7357%" height="15" fill="rgb(252,166,36)" fg:x="3557" fg:w="27"/><text x="97.1710%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.03%)</title><rect x="97.6294%" y="229" width="0.0272%" height="15" fill="rgb(245,132,34)" fg:x="3583" fg:w="1"/><text x="97.8794%" y="239.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.11%)</title><rect x="97.6567%" y="245" width="0.1090%" height="15" fill="rgb(236,54,3)" fg:x="3584" fg:w="4"/><text x="97.9067%" y="255.50"></text></g><g><title>regex::regex::string::Regex::find_at (43 samples, 1.17%)</title><rect x="96.6485%" y="261" width="1.1717%" height="15" fill="rgb(241,173,43)" fg:x="3547" fg:w="43"/><text x="96.8985%" y="271.50"></text></g><g><title>tlv_get_addr (2 samples, 0.05%)</title><rect x="97.7657%" y="245" width="0.0545%" height="15" fill="rgb(215,190,9)" fg:x="3588" fg:w="2"/><text x="98.0157%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (2 samples, 0.05%)</title><rect x="97.8202%" y="261" width="0.0545%" height="15" fill="rgb(242,101,16)" fg:x="3590" fg:w="2"/><text x="98.0702%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="97.8747%" y="261" width="0.0272%" height="15" fill="rgb(223,190,21)" fg:x="3592" fg:w="1"/><text x="98.1247%" y="271.50"></text></g><g><title>DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="97.9019%" y="245" width="0.0272%" height="15" fill="rgb(215,228,25)" fg:x="3593" fg:w="1"/><text x="98.1519%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="97.9292%" y="245" width="0.0272%" height="15" fill="rgb(225,36,22)" fg:x="3594" fg:w="1"/><text x="98.1792%" y="255.50"></text></g><g><title>regex_automata::util::captures::Captures::all (3 samples, 0.08%)</title><rect x="97.9019%" y="261" width="0.0817%" height="15" fill="rgb(251,106,46)" fg:x="3593" fg:w="3"/><text x="98.1519%" y="271.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="97.9564%" y="245" width="0.0272%" height="15" fill="rgb(208,90,1)" fg:x="3595" fg:w="1"/><text x="98.2064%" y="255.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (72 samples, 1.96%)</title><rect x="96.0490%" y="277" width="1.9619%" height="15" fill="rgb(243,10,4)" fg:x="3525" fg:w="72"/><text x="96.2990%" y="287.50">n..</text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="97.9837%" y="261" width="0.0272%" height="15" fill="rgb(212,137,27)" fg:x="3596" fg:w="1"/><text x="98.2337%" y="271.50"></text></g><g><title>regex::regex::string::Regex::find_at (1 samples, 0.03%)</title><rect x="98.0109%" y="277" width="0.0272%" height="15" fill="rgb(231,220,49)" fg:x="3597" fg:w="1"/><text x="98.2609%" y="287.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (3,544 samples, 96.57%)</title><rect x="1.4986%" y="309" width="96.5668%" height="15" fill="rgb(237,96,20)" fg:x="55" fg:w="3544"/><text x="1.7486%" y="319.50">nexus::parser::Parser::parse_nexus_subtree</text></g><g><title>nexus::parser::Parser::parse_punctuation (75 samples, 2.04%)</title><rect x="96.0218%" y="293" width="2.0436%" height="15" fill="rgb(239,229,30)" fg:x="3524" fg:w="75"/><text x="96.2718%" y="303.50">n..</text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="98.0381%" y="277" width="0.0272%" height="15" fill="rgb(219,65,33)" fg:x="3598" fg:w="1"/><text x="98.2881%" y="287.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="98.0654%" y="293" width="0.0272%" height="15" fill="rgb(243,134,7)" fg:x="3599" fg:w="1"/><text x="98.3154%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1 samples, 0.03%)</title><rect x="98.2289%" y="261" width="0.0272%" height="15" fill="rgb(216,177,54)" fg:x="3605" fg:w="1"/><text x="98.4789%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots (1 samples, 0.03%)</title><rect x="98.3106%" y="245" width="0.0272%" height="15" fill="rgb(211,160,20)" fg:x="3608" fg:w="1"/><text x="98.5606%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (6 samples, 0.16%)</title><rect x="98.2289%" y="277" width="0.1635%" height="15" fill="rgb(239,85,39)" fg:x="3605" fg:w="6"/><text x="98.4789%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (5 samples, 0.14%)</title><rect x="98.2561%" y="261" width="0.1362%" height="15" fill="rgb(232,125,22)" fg:x="3606" fg:w="5"/><text x="98.5061%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (2 samples, 0.05%)</title><rect x="98.3379%" y="245" width="0.0545%" height="15" fill="rgb(244,57,34)" fg:x="3609" fg:w="2"/><text x="98.5879%" y="255.50"></text></g><g><title>_platform_memset (2 samples, 0.05%)</title><rect x="98.3379%" y="229" width="0.0545%" height="15" fill="rgb(214,203,32)" fg:x="3609" fg:w="2"/><text x="98.5879%" y="239.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.05%)</title><rect x="98.3924%" y="277" width="0.0545%" height="15" fill="rgb(207,58,43)" fg:x="3611" fg:w="2"/><text x="98.6424%" y="287.50"></text></g><g><title>_free (1 samples, 0.03%)</title><rect x="98.4469%" y="277" width="0.0272%" height="15" fill="rgb(215,193,15)" fg:x="3613" fg:w="1"/><text x="98.6969%" y="287.50"></text></g><g><title>_nanov2_free (2 samples, 0.05%)</title><rect x="98.4741%" y="277" width="0.0545%" height="15" fill="rgb(232,15,44)" fg:x="3614" fg:w="2"/><text x="98.7241%" y="287.50"></text></g><g><title>regex::regex::string::Regex::find_at (17 samples, 0.46%)</title><rect x="98.5286%" y="277" width="0.4632%" height="15" fill="rgb(212,3,48)" fg:x="3616" fg:w="17"/><text x="98.7786%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (12 samples, 0.33%)</title><rect x="98.6649%" y="261" width="0.3270%" height="15" fill="rgb(218,128,7)" fg:x="3621" fg:w="12"/><text x="98.9149%" y="271.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (9 samples, 0.25%)</title><rect x="98.7466%" y="245" width="0.2452%" height="15" fill="rgb(226,216,39)" fg:x="3624" fg:w="9"/><text x="98.9966%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (7 samples, 0.19%)</title><rect x="98.8011%" y="229" width="0.1907%" height="15" fill="rgb(243,47,51)" fg:x="3626" fg:w="7"/><text x="99.0511%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (2 samples, 0.05%)</title><rect x="98.9918%" y="277" width="0.0545%" height="15" fill="rgb(241,183,40)" fg:x="3633" fg:w="2"/><text x="99.2418%" y="287.50"></text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="99.0463%" y="277" width="0.0272%" height="15" fill="rgb(231,217,32)" fg:x="3635" fg:w="1"/><text x="99.2963%" y="287.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="99.0463%" y="261" width="0.0272%" height="15" fill="rgb(229,61,38)" fg:x="3635" fg:w="1"/><text x="99.2963%" y="271.50"></text></g><g><title>nexus::parser::Parser::parse_nexus_subtree (3,592 samples, 97.87%)</title><rect x="1.2262%" y="325" width="97.8747%" height="15" fill="rgb(225,210,5)" fg:x="45" fg:w="3592"/><text x="1.4762%" y="335.50">nexus::parser::Parser::parse_nexus_subtree</text></g><g><title>nexus::parser::Parser::parse_punctuation (38 samples, 1.04%)</title><rect x="98.0654%" y="309" width="1.0354%" height="15" fill="rgb(231,79,45)" fg:x="3599" fg:w="38"/><text x="98.3154%" y="319.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (37 samples, 1.01%)</title><rect x="98.0926%" y="293" width="1.0082%" height="15" fill="rgb(224,100,7)" fg:x="3600" fg:w="37"/><text x="98.3426%" y="303.50"></text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="99.0736%" y="277" width="0.0272%" height="15" fill="rgb(241,198,18)" fg:x="3636" fg:w="1"/><text x="99.3236%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.03%)</title><rect x="99.1281%" y="293" width="0.0272%" height="15" fill="rgb(252,97,53)" fg:x="3638" fg:w="1"/><text x="99.3781%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (1 samples, 0.03%)</title><rect x="99.1553%" y="293" width="0.0272%" height="15" fill="rgb(220,88,7)" fg:x="3639" fg:w="1"/><text x="99.4053%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1 samples, 0.03%)</title><rect x="99.1553%" y="277" width="0.0272%" height="15" fill="rgb(213,176,14)" fg:x="3639" fg:w="1"/><text x="99.4053%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1 samples, 0.03%)</title><rect x="99.1553%" y="261" width="0.0272%" height="15" fill="rgb(246,73,7)" fg:x="3639" fg:w="1"/><text x="99.4053%" y="271.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="99.1826%" y="293" width="0.0272%" height="15" fill="rgb(245,64,36)" fg:x="3640" fg:w="1"/><text x="99.4326%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.19%)</title><rect x="99.2098%" y="277" width="0.1907%" height="15" fill="rgb(245,80,10)" fg:x="3641" fg:w="7"/><text x="99.4598%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.14%)</title><rect x="99.2643%" y="261" width="0.1362%" height="15" fill="rgb(232,107,50)" fg:x="3643" fg:w="5"/><text x="99.5143%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.14%)</title><rect x="99.2643%" y="245" width="0.1362%" height="15" fill="rgb(253,3,0)" fg:x="3643" fg:w="5"/><text x="99.5143%" y="255.50"></text></g><g><title>regex::regex::string::Regex::find_at (8 samples, 0.22%)</title><rect x="99.2098%" y="293" width="0.2180%" height="15" fill="rgb(212,99,53)" fg:x="3641" fg:w="8"/><text x="99.4598%" y="303.50"></text></g><g><title>tlv_get_addr (1 samples, 0.03%)</title><rect x="99.4005%" y="277" width="0.0272%" height="15" fill="rgb(249,111,54)" fg:x="3648" fg:w="1"/><text x="99.6505%" y="287.50"></text></g><g><title>nexus::parser::Parser::parse_punctuation (13 samples, 0.35%)</title><rect x="99.1008%" y="325" width="0.3542%" height="15" fill="rgb(249,55,30)" fg:x="3637" fg:w="13"/><text x="99.3508%" y="335.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (13 samples, 0.35%)</title><rect x="99.1008%" y="309" width="0.3542%" height="15" fill="rgb(237,47,42)" fg:x="3637" fg:w="13"/><text x="99.3508%" y="319.50"></text></g><g><title>regex_automata::util::captures::Captures::all (1 samples, 0.03%)</title><rect x="99.4278%" y="293" width="0.0272%" height="15" fill="rgb(211,20,18)" fg:x="3649" fg:w="1"/><text x="99.6778%" y="303.50"></text></g><g><title>nanov2_malloc (1 samples, 0.03%)</title><rect x="99.4278%" y="277" width="0.0272%" height="15" fill="rgb(231,203,46)" fg:x="3649" fg:w="1"/><text x="99.6778%" y="287.50"></text></g><g><title>nexus::parser::Parser::parse (3,635 samples, 99.05%)</title><rect x="0.5450%" y="341" width="99.0463%" height="15" fill="rgb(237,142,3)" fg:x="20" fg:w="3635"/><text x="0.7950%" y="351.50">nexus::parser::Parser::parse</text></g><g><title>nexus::parser::Parser::parse_word (5 samples, 0.14%)</title><rect x="99.4550%" y="325" width="0.1362%" height="15" fill="rgb(241,107,1)" fg:x="3650" fg:w="5"/><text x="99.7050%" y="335.50"></text></g><g><title>nexus::lexer::Lexer::next_token_and_cursor (5 samples, 0.14%)</title><rect x="99.4550%" y="309" width="0.1362%" height="15" fill="rgb(229,83,13)" fg:x="3650" fg:w="5"/><text x="99.7050%" y="319.50"></text></g><g><title>regex::regex::string::Regex::find_at (5 samples, 0.14%)</title><rect x="99.4550%" y="293" width="0.1362%" height="15" fill="rgb(241,91,40)" fg:x="3650" fg:w="5"/><text x="99.7050%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.14%)</title><rect x="99.4550%" y="277" width="0.1362%" height="15" fill="rgb(225,3,45)" fg:x="3650" fg:w="5"/><text x="99.7050%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.14%)</title><rect x="99.4550%" y="261" width="0.1362%" height="15" fill="rgb(244,223,14)" fg:x="3650" fg:w="5"/><text x="99.7050%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.11%)</title><rect x="99.4823%" y="245" width="0.1090%" height="15" fill="rgb(224,124,37)" fg:x="3651" fg:w="4"/><text x="99.7323%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (13 samples, 0.35%)</title><rect x="99.5913%" y="325" width="0.3542%" height="15" fill="rgb(251,171,30)" fg:x="3655" fg:w="13"/><text x="99.8413%" y="335.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3,665 samples, 99.86%)</title><rect x="0.1090%" y="389" width="99.8638%" height="15" fill="rgb(236,46,54)" fg:x="4" fg:w="3665"/><text x="0.3590%" y="399.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3,665 samples, 99.86%)</title><rect x="0.1090%" y="373" width="99.8638%" height="15" fill="rgb(245,213,5)" fg:x="4" fg:w="3665"/><text x="0.3590%" y="383.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>nexus::parse_file (3,665 samples, 99.86%)</title><rect x="0.1090%" y="357" width="99.8638%" height="15" fill="rgb(230,144,27)" fg:x="4" fg:w="3665"/><text x="0.3590%" y="367.50">nexus::parse_file</text></g><g><title>std::fs::read_to_string::inner (14 samples, 0.38%)</title><rect x="99.5913%" y="341" width="0.3815%" height="15" fill="rgb(220,86,6)" fg:x="3655" fg:w="14"/><text x="99.8413%" y="351.50"></text></g><g><title>read (1 samples, 0.03%)</title><rect x="99.9455%" y="325" width="0.0272%" height="15" fill="rgb(240,20,13)" fg:x="3668" fg:w="1"/><text x="100.1955%" y="335.50"></text></g><g><title>all (3,670 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(217,89,34)" fg:x="0" fg:w="3670"/><text x="0.2500%" y="463.50"></text></g><g><title>start (3,670 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(229,13,5)" fg:x="0" fg:w="3670"/><text x="0.2500%" y="447.50">start</text></g><g><title>main (3,666 samples, 99.89%)</title><rect x="0.1090%" y="421" width="99.8910%" height="15" fill="rgb(244,67,35)" fg:x="4" fg:w="3666"/><text x="0.3590%" y="431.50">main</text></g><g><title>std::rt::lang_start_internal (3,666 samples, 99.89%)</title><rect x="0.1090%" y="405" width="99.8910%" height="15" fill="rgb(221,40,2)" fg:x="4" fg:w="3666"/><text x="0.3590%" y="415.50">std::rt::lang_start_internal</text></g><g><title>std::sys::pal::unix::init (1 samples, 0.03%)</title><rect x="99.9728%" y="389" width="0.0272%" height="15" fill="rgb(237,157,21)" fg:x="3669" fg:w="1"/><text x="100.2228%" y="399.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::init (1 samples, 0.03%)</title><rect x="99.9728%" y="373" width="0.0272%" height="15" fill="rgb(222,94,11)" fg:x="3669" fg:w="1"/><text x="100.2228%" y="383.50"></text></g><g><title>__mmap (1 samples, 0.03%)</title><rect x="99.9728%" y="357" width="0.0272%" height="15" fill="rgb(249,113,6)" fg:x="3669" fg:w="1"/><text x="100.2228%" y="367.50"></text></g></svg></svg>